{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\prepare\\\\front\\\\components\\\\PostForm.js\";\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState(''); //컴포넌트의 state\n\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  const onChangeImages = useCallback(() => {\n    //console.log('images', e.target.files); 유사배열\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click(); //click() - element를 마우스로 클릭한 것으로 한다.\n  }, [imageInput.current]);\n  useEffect(() => {\n    //post가 완료되어야 text를 set '' \n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmitForm = useCallback(() => {\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: text\n    });\n  }, [text]); //[text] 안써서 text가 undefined\n  //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\n  //e.target - 특정 이벤트가 발생하는 태그\n  //e.target.name - 태그의 이름\n  //e.target.value - 태그에 입력된느 값\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmitForm,\n    children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          float: 'right'\n        },\n        htmlType: \"submit\",\n        children: \"\\uC9F9\\uC9F9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: imagePaths.map(v => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'inline-block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: 'http://localhost:3000/' + v,\n            style: {\n              width: '200px'\n            },\n            alt: v\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC81C\\uAC70\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }, this)]\n        }, v, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/components/PostForm.js"],"names":["React","useCallback","useState","useRef","useEffect","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","PostForm","dispatch","text","setText","imagePaths","addPostDone","state","post","imageInput","onChangeImages","imageFormData","FormData","forEach","call","e","target","files","f","append","type","data","onClickImageUpload","current","click","onSubmitForm","onChangeText","value","margin","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');//컴포넌트의 state\r\n  const { imagePaths, addPostDone }=useSelector((state) => state.post);\r\n    \r\n  const imageInput = useRef();\r\n  \r\n  const onChangeImages = useCallback(()=>{\r\n    //console.log('images', e.target.files); 유사배열\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f)=>{\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(()=>{\r\n    imageInput.current.click();\r\n    //click() - element를 마우스로 클릭한 것으로 한다.\r\n}, [imageInput.current]);\r\n  \r\n  useEffect(() => {\r\n    //post가 완료되어야 text를 set '' \r\n    if(addPostDone) {\r\n      setText('');\r\n    }\r\n  },[addPostDone]);\r\n\r\n  const onSubmitForm = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: text\r\n    });\r\n  }, [text]); //[text] 안써서 text가 undefined\r\n\r\n  //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\r\n  //e.target - 특정 이벤트가 발생하는 태그\r\n  //e.target.name - 태그의 이름\r\n  //e.target.value - 태그에 입력된느 값\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  \r\n    return (\r\n        <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmitForm}>\r\n          <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" />\r\n          <div>\r\n            <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n            <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n            <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n          </div>\r\n          <div>\r\n            {imagePaths.map((v) => {\r\n              return (\r\n                <div key={v} style={{ display: 'inline-block' }}>\r\n                  <img src={'http://localhost:3000/' + v} style={{ width: '200px' }} alt={v} />\r\n                  <div>\r\n                    <Button>제거</Button>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </Form>\r\n      );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}