{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\chatter\\\\chatter\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Popover, Button, List, Comment, Avatar } from 'antd';\nimport { HeartTwoTone, MessageOutlined, EllipsisOutlined, HeartOutlined, RetweetOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport CommentForm from './CommentForm';\nimport FollowButton from './FollowButton';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardWrapper = styled.div.withConfig({\n  displayName: \"PostCard__CardWrapper\",\n  componentId: \"sc-10lmnn1-0\"\n})([\"margin-bottom:20px;\"]);\n\nconst PostCard = ({\n  post\n}) => {\n  moment.locale('ko');\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    likePostError\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id; // me 있으면 id 없으면 undefined\n\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const liked = post.Likers.find(v => v.id === id);\n  return /*#__PURE__*/_jsxDEV(CardWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 34\n      }, this) // 이미지가 반드시 한개 이상일때 실행된다.\n      ,\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 23\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, \"elipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)],\n      extra: /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 16\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          float: 'right'\n        },\n        children: moment(post.createdAt).startOf('hour').fromNow()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Link, {\n          href: `user/${post.User.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: post.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 19\n        }, this),\n        title: post.User.nickname,\n        description: post.Retweet ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: `${post.User.nickname}님이 리트윗하셨습니다`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n              images: post.Retweet.Images\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 52\n            }, this),\n            extra: /*#__PURE__*/_jsxDEV(FollowButton, {\n              post: post.Retweet\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 26\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n              avatar: /*#__PURE__*/_jsxDEV(Link, {\n                href: `user/${post.Retweet.User.id}`,\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    children: post.Retweet.User.nickname[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 76\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 73\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 29\n              }, this),\n              title: post.Retweet.User.nickname,\n              description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n                postData: post.Retweet.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 34\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments || [],\n        renderItem: item =>\n        /*#__PURE__*/\n        // item은 post.Comments\n        _jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname // item.User.nickname\n            ,\n            avatar: /*#__PURE__*/_jsxDEV(Link, {\n              href: {\n                pathname: '/user',\n                query: {\n                  id: item.User.id\n                }\n              },\n              as: `/user/${item.User.id}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: item.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 28\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 23\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    // shape을 이용하면 더 정확하게 prop정의 할수있다.\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","useSelector","useDispatch","Card","Popover","Button","List","Comment","Avatar","HeartTwoTone","MessageOutlined","EllipsisOutlined","HeartOutlined","RetweetOutlined","styled","Link","moment","PostImages","PostCardContent","CommentForm","FollowButton","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","CardWrapper","div","PostCard","post","locale","dispatch","removePostLoading","likePostError","state","commentFormOpened","setCommentFormOpened","me","user","id","onUnlike","alert","type","data","onLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","Images","User","float","createdAt","startOf","fromNow","nickname","Retweet","content","Comments","length","item","pathname","query","propTypes","shape","number","object","string","arrayOf","any"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Card, Popover, Button, List, Comment, Avatar } from 'antd';\r\nimport { HeartTwoTone, MessageOutlined, EllipsisOutlined, HeartOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport styled from 'styled-components';\r\nimport Link from 'next/link';\r\n\r\nimport moment from 'moment';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport CommentForm from './CommentForm';\r\nimport FollowButton from './FollowButton';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\n\r\nconst CardWrapper = styled.div`\r\n    margin-bottom: 20px;\r\n`;\r\nconst PostCard = ({ post }) => {\r\n  moment.locale('ko');\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading, likePostError } = useSelector((state) => state.post);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const { me } = useSelector((state) => state.user);\r\n  const id = me?.id; // me 있으면 id 없으면 undefined\r\n\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [post, id]);\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [post, id]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [post, id]);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [post, id]);\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n\r\n  return (\r\n    <CardWrapper key={post.id}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}// 이미지가 반드시 한개 이상일때 실행된다.\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n          <MessageOutlined key=\"message\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"elipsis\"\r\n            content={(\r\n              <Button.Group>\r\n                {id && post.User.id === id\r\n                  ? (\r\n                    <>\r\n                      <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                    </>\r\n                  )\r\n                  : <Button>신고</Button>}\r\n              </Button.Group>\r\n                )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        extra={<FollowButton post={post} />}\r\n      >\r\n        <span style={{ float: 'right' }}>{moment(post.createdAt).startOf('hour').fromNow()}</span>\r\n        <Card.Meta\r\n          avatar={<Link href={`user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n          title={post.User.nickname}\r\n          description={post.Retweet\r\n            ? (\r\n              <>\r\n                <p>{`${post.User.nickname}님이 리트윗하셨습니다`}</p>\r\n                <Card\r\n                  cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                  extra={<FollowButton post={post.Retweet} />}\r\n                >\r\n                  <Card.Meta\r\n                    avatar={<Link href={`user/${post.Retweet.User.id}`}><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                    title={post.Retweet.User.nickname}\r\n                    description={<PostCardContent postData={post.Retweet.content} />}\r\n                  />\r\n                </Card>\r\n              </>\r\n            )\r\n            : <PostCardContent postData={post.content} />}\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={(item) => // item은 post.Comments\r\n              (\r\n                <li>\r\n                  <Comment\r\n                    author={item.User.nickname}// item.User.nickname\r\n                    avatar={(\r\n                      <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                        <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                      </Link>\r\n                        )}\r\n                    content={item.content}\r\n                  />\r\n                </li>\r\n              )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({ // shape을 이용하면 더 정확하게 prop정의 할수있다.\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.any),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n  }),\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}