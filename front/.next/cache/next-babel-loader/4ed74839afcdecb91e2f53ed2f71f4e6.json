{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\chatter\\\\chatter\\\\front\\\\pages\\\\main.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport { message } from 'antd';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport Layout from '../components/Layout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    loadPostsError,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      return alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      // scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id // 마지막 post의 id\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return window.removeEventListener('scroll', onScroll); // 메모리누수로 인한 스크롤 이벤트 지우기\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    if (loadPostsError) {\n      message.info(loadPostsError);\n    }\n  }, [loadPostsError]);\n\n  const mainContents = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 33\n    }, this))]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: mainContents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  /*\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  */\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END); // REQUEST가 SUCCESS가 될때까지 기다려준다.\n\n  await context.store.sagaTask.toPromise();\n});\nexport default Main;","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/pages/main.js"],"names":["React","useEffect","useDispatch","useSelector","END","message","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Layout","Main","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","loadPostsError","retweetError","post","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","data","length","id","addEventListener","removeEventListener","info","mainContents","map","getServerSideProps","context","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport { message } from 'antd';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport Layout from '../components/Layout';\r\n\r\nconst Main = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts,\r\n    loadPostsLoading, loadPostsError, retweetError } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      return alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n      if (window.scrollY + document.documentElement.clientHeight\r\n        > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            data: mainPosts[mainPosts.length - 1]?.id, // 마지막 post의 id\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n\r\n    return (window.removeEventListener('scroll', onScroll)); // 메모리누수로 인한 스크롤 이벤트 지우기\r\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loadPostsError) {\r\n      message.info(loadPostsError);\r\n    }\r\n  }, [loadPostsError]);\r\n\r\n  const mainContents = (\r\n    <>\r\n      { me && <PostForm />}\r\n      {mainPosts.map((post) => (<PostCard key={post.id} post={post} />))}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Layout>{mainContents}</Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  /*\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  */\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n\r\n  context.store.dispatch(END); // REQUEST가 SUCCESS가 될때까지 기다려준다.\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}