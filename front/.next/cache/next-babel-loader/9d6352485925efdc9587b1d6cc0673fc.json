{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadRoom),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadRoom),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(chatSaga);\n\nimport axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { LOAD_ROOM_REQUEST, LOAD_ROOM_SUCCESS, LOAD_ROOM_FAILURE } from '../reducers/chat';\n\nfunction loadRoomAPI(data) {\n  return axios.get(\"/room/\".concat(data));\n}\n\nfunction loadRoom(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadRoom$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadRoomAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_ROOM_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOAD_ROOM_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLoadRoom() {\n  return _regeneratorRuntime.wrap(function watchLoadRoom$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_ROOM_REQUEST, loadRoom);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function chatSaga() {\n  return _regeneratorRuntime.wrap(function chatSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadRoom)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/sagas/chat.js"],"names":["loadRoom","watchLoadRoom","chatSaga","axios","all","delay","fork","put","takeLatest","throttle","call","LOAD_ROOM_REQUEST","LOAD_ROOM_SUCCESS","LOAD_ROOM_FAILURE","loadRoomAPI","data","get","action","result","type","console","error","response"],"mappings":";;oDAaWA,Q;qDAgBAC,a;qDAIeC,Q;;AAjC1B,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,QAA5C,EAAsDC,IAAtD,QAAkE,oBAAlE;AAEA,SACIC,iBADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,QAIO,kBAJP;;AAMA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAOZ,KAAK,CAACa,GAAN,iBAAmBD,IAAnB,EAAP;AACH;;AAED,SAAWf,QAAX,CAAoBiB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMP,IAAI,CAACI,WAAD,EAAcG,MAAM,CAACF,IAArB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMX,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAEP,iBADA;AAENG,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQK,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMd,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAEN,iBADA;AAENQ,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaP;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAWd,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACG,iBAAD,EAAoBX,QAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAWE,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNE,IAAI,CAACL,aAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LOAD_ROOM_REQUEST,\r\n    LOAD_ROOM_SUCCESS,\r\n    LOAD_ROOM_FAILURE,\r\n} from '../reducers/chat';\r\n\r\nfunction loadRoomAPI(data) {\r\n    return axios.get(`/room/${data}`);\r\n}\r\n\r\nfunction * loadRoom(action) {\r\n    try{\r\n        const result = yield call(loadRoomAPI, action.data);\r\n        yield put({\r\n            type: LOAD_ROOM_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_ROOM_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchLoadRoom() {\r\n    yield takeLatest(LOAD_ROOM_REQUEST, loadRoom);\r\n}\r\n\r\nexport default function * chatSaga() {\r\n    yield all([\r\n        fork(watchLoadRoom)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}