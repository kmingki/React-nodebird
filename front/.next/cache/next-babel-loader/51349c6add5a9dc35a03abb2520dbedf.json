{"ast":null,"code":"import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport user from './user';\nimport post from './post';\nimport chat from './chat';\nvar persistConfig = {\n  key: 'root',\n  // localStorage에 저장합니다.\n  storage: storage,\n  // auth, board, studio 3개의 reducer 중에 auth reducer만 localstorage에 저장합니다.\n  whitelist: ['user'] // blacklist -> 그것만 제외합니다\n\n};\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    case HYDRATE:\n      // HYDRATE액션을 처리하는 리듀서가 필요하다.\n      // console.log('HYDRATE', action);\n      // HYDRATE는 서버에서 생성한 상태를 클라이언트 스토어에 합쳐준다.\n      console.log('HYDRATE');\n      console.log(action.payload);\n      return action.payload;\n    // action.payload에는 서버에서 생성한 스토어의 상태가 담겨있다.\n\n    default:\n      {\n        console.log('client store');\n        var combinedReducer = combineReducers({\n          user: user,\n          post: post,\n          chat: chat\n        });\n        return combinedReducer(state, action);\n      }\n  }\n};\n\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/reducers/index.js"],"names":["HYDRATE","combineReducers","persistReducer","storage","user","post","chat","persistConfig","key","whitelist","rootReducer","state","action","type","console","log","payload","combinedReducer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpB;AACAL,EAAAA,OAAO,EAAPA,OAHoB;AAIpB;AACAM,EAAAA,SAAS,EAAE,CAAC,MAAD,CALS,CAMpB;;AANoB,CAAtB;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,OAAL;AAAc;AACZ;AACA;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACA,aAAOJ,MAAM,CAACI,OAAd;AAAuB;;AACzB;AAAS;AACPF,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,YAAME,eAAe,GAAGhB,eAAe,CAAC;AACtCG,UAAAA,IAAI,EAAJA,IADsC;AAEtCC,UAAAA,IAAI,EAAJA,IAFsC;AAGtCC,UAAAA,IAAI,EAAJA;AAHsC,SAAD,CAAvC;AAKA,eAAOW,eAAe,CAACN,KAAD,EAAQC,MAAR,CAAtB;AACD;AAfH;AAiBD,CAlBD;;AAoBA,eAAeV,cAAc,CAACK,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\nimport { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport user from './user';\r\nimport post from './post';\r\nimport chat from './chat';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  // localStorage에 저장합니다.\r\n  storage,\r\n  // auth, board, studio 3개의 reducer 중에 auth reducer만 localstorage에 저장합니다.\r\n  whitelist: ['user'],\r\n  // blacklist -> 그것만 제외합니다\r\n};\r\n\r\nconst rootReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE: // HYDRATE액션을 처리하는 리듀서가 필요하다.\r\n      // console.log('HYDRATE', action);\r\n      // HYDRATE는 서버에서 생성한 상태를 클라이언트 스토어에 합쳐준다.\r\n      console.log('HYDRATE');\r\n      console.log(action.payload);\r\n      return action.payload; // action.payload에는 서버에서 생성한 스토어의 상태가 담겨있다.\r\n    default: {\r\n      console.log('client store');\r\n      const combinedReducer = combineReducers({\r\n        user,\r\n        post,\r\n        chat,\r\n      });\r\n      return combinedReducer(state, action);\r\n    }\r\n  }\r\n};\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n"]},"metadata":{},"sourceType":"module"}