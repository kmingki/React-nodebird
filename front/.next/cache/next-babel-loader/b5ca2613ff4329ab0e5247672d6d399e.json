{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\chatter\\\\chatter\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Popover, Button, List, Comment, Avatar } from 'antd';\nimport { HeartTwoTone, MessageOutlined, EllipsisOutlined, HeartOutlined, RetweetOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport Link from 'next/link';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport CommentForm from './CommentForm';\nimport FollowButton from './FollowButton';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardWrapper = styled.div.withConfig({\n  displayName: \"PostCard__CardWrapper\",\n  componentId: \"sc-10lmnn1-0\"\n})([\"margin-bottom:20px;\"]);\n\nconst PostCard = ({\n  post\n}) => {\n  moment.locale('ko');\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    likePostError\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id; //me 있으면 id 없으면 undefined\n\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [post, id]);\n  const liked = post.Likers.find(v => v.id === id);\n  return /*#__PURE__*/_jsxDEV(CardWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 38\n      }, this) //이미지가 반드시 한개 이상일때 실행된다.\n      ,\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, \"elipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)],\n      extra: /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 20\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          float: 'right'\n        },\n        children: moment(post.createdAt).startOf('hour').fromNow()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Link, {\n          href: `user/${post.User.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: post.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this),\n        title: post.User.nickname,\n        description: post.Retweet ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: `${post.User.nickname}님이 리트윗하셨습니다`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n              images: post.Retweet.Images\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 54\n            }, this),\n            extra: /*#__PURE__*/_jsxDEV(FollowButton, {\n              post: post.Retweet\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 28\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n              avatar: /*#__PURE__*/_jsxDEV(Link, {\n                href: `user/${post.Retweet.User.id}`,\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    children: post.Retweet.User.nickname[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 80\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 77\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this),\n              title: post.Retweet.User.nickname,\n              description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n                postData: post.Retweet.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 38\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments || [],\n        renderItem: item => {\n          //item은 post.Comments\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Comment, {\n              author: item.User.nickname //item.User.nickname\n              ,\n              avatar: /*#__PURE__*/_jsxDEV(Link, {\n                href: {\n                  pathname: '/user',\n                  query: {\n                    id: item.User.id\n                  }\n                },\n                as: `/user/${item.User.id}`,\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    children: item.User.nickname[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 28\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 29\n              }, this),\n              content: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    //shape을 이용하면 더 정확하게 prop정의 할수있다.\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","useSelector","useDispatch","Card","Popover","Button","List","Comment","Avatar","HeartTwoTone","MessageOutlined","EllipsisOutlined","HeartOutlined","RetweetOutlined","styled","Link","PostImages","PostCardContent","CommentForm","FollowButton","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","moment","CardWrapper","div","PostCard","post","locale","dispatch","removePostLoading","likePostError","state","commentFormOpened","setCommentFormOpened","me","user","id","onUnlike","alert","type","data","onLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","Images","User","float","createdAt","startOf","fromNow","nickname","Retweet","content","Comments","length","item","pathname","query","propTypes","shape","number","object","string","arrayOf","any"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect }from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Card, Popover, Button, List, Comment, Avatar } from 'antd';\r\nimport { HeartTwoTone, MessageOutlined, EllipsisOutlined, HeartOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport styled from 'styled-components';\r\nimport Link from 'next/link';\r\n\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport CommentForm from './CommentForm';\r\nimport FollowButton from './FollowButton';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport moment from 'moment';\r\n\r\nconst CardWrapper = styled.div`\r\n    margin-bottom: 20px;\r\n`;\r\nconst PostCard = ({ post }) => {\r\n\r\n    moment.locale('ko');\r\n    const dispatch = useDispatch();\r\n    const { removePostLoading, likePostError } = useSelector((state)=>state.post);\r\n    const [ commentFormOpened, setCommentFormOpened ] = useState(false);\r\n    const { me } = useSelector((state) => state.user);\r\n    const id = me?.id; //me 있으면 id 없으면 undefined\r\n\r\n    const onUnlike = useCallback(()=>{\r\n\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id\r\n        });\r\n    }, [post, id]);\r\n\r\n    const onLike = useCallback(() => {\r\n        \r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n          type: LIKE_POST_REQUEST,\r\n          data: post.id,\r\n        });\r\n\r\n      }, [post, id]);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    },[]);\r\n\r\n    const onRemovePost = useCallback(()=>{\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [post, id]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [post, id]);\r\n    const liked = post.Likers.find(v=> v.id === id);\r\n\r\n    return(\r\n        <CardWrapper key={post.id}>\r\n            <Card\r\n            cover={post.Images[0] && <PostImages images={post.Images}/>}//이미지가 반드시 한개 이상일때 실행된다.\r\n            actions={[\r\n                <RetweetOutlined key=\"retweet\" onClick={onRetweet}/>,\r\n                liked \r\n                ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n                : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n                <MessageOutlined key=\"message\" onClick={onToggleComment}/>,\r\n                <Popover \r\n                key=\"elipsis\" \r\n                content={(\r\n                    <Button.Group>\r\n                        {id && post.User.id === id \r\n                        ? (\r\n                            <>\r\n                            <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                        </>\r\n                        )\r\n                     : <Button>신고</Button>}\r\n                    </Button.Group>\r\n                )}\r\n                >\r\n                    <EllipsisOutlined />\r\n                </Popover>,\r\n            ]}\r\n            extra={<FollowButton post={post} />}\r\n            >\r\n                <span style={{ float: 'right' }}>{moment(post.createdAt).startOf('hour').fromNow()}</span>\r\n                <Card.Meta\r\n                avatar={<Link href={`user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title={post.User.nickname}\r\n                description={post.Retweet ?\r\n                    <>\r\n                    <p>{`${post.User.nickname}님이 리트윗하셨습니다`}</p>\r\n                    <Card\r\n                    cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images}/>}\r\n                    extra={<FollowButton post={post.Retweet} />}\r\n                    >\r\n                        <Card.Meta\r\n                        avatar={<Link href={`user/${post.Retweet.User.id}`}><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                        title={post.Retweet.User.nickname}\r\n                        description={<PostCardContent postData={post.Retweet.content}/>}\r\n                        />\r\n                    </Card>\r\n                    </>\r\n                    : <PostCardContent postData={post.content} />}\r\n                />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                <CommentForm post={post} />\r\n                <List\r\n                header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                itemLayout=\"horizontal\"\r\n                dataSource={post.Comments || []}\r\n                renderItem={(item) => { //item은 post.Comments\r\n                    return(\r\n                    <li>\r\n                        <Comment \r\n                        author={item.User.nickname}//item.User.nickname\r\n                        avatar={(\r\n                            <Link href={{ pathname: '/user', query: { id: item.User.id }}} as={`/user/${item.User.id}`}>                          \r\n                        <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                        </Link>\r\n                        )}\r\n                        content={item.content}\r\n                        />\r\n                    </li>\r\n                    );\r\n                }\r\n            }\r\n                />                 \r\n                </>\r\n            )}\r\n        </CardWrapper>          \r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({ //shape을 이용하면 더 정확하게 prop정의 할수있다.\r\n        id:PropTypes.number,\r\n        User:PropTypes.object,\r\n        content:PropTypes.string,\r\n        createdAt:PropTypes.string,\r\n        Comments:PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.any),\r\n        Likers: PropTypes.arrayOf(PropTypes.object)\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}