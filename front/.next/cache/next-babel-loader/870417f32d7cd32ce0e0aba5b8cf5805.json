{"ast":null,"code":"//import shortId from 'shortid';\n//import faker from 'faker';\nimport produce from \"immer\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //action\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\nexport const ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\nexport const ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //action creator : 파라미터를 받아와서 액션객체 형태로 만들어준다.\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n}); //()=>()인 경우는 괄호 안이 return\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); //Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\n//produce state, 상태의 결과 함수\n//return produce()인 것\n//draft가 state로 바뀌는것\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts); //action.data에 load한 배열 들어있음, action.data+draft.mainPosts\n\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data); //새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => {\n        v.id !== action.data;\n      });\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n    //return draft해도 되지않나...\n  }\n});\n\nexport default reducer;\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POSTS_REQUEST","ADD_POSTS_SUCCESS","ADD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","id","post","find","PostId","Comments"],"mappings":"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","sourcesContent":["//import shortId from 'shortid';\r\n//import faker from 'faker';\r\nimport produce from \"immer\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths:[],\r\n  hasMorePosts: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n//action\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\r\nexport const ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\r\nexport const ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n\r\n//action creator : 파라미터를 받아와서 액션객체 형태로 만들어준다.\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\n//()=>()인 경우는 괄호 안이 return\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n//Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\r\n//produce state, 상태의 결과 함수\r\n//return produce()인 것\r\n//draft가 state로 바뀌는것\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);//action.data에 load한 배열 들어있음, action.data+draft.mainPosts\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE: \r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone=false;\r\n      draft.addPostError=null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone=true;\r\n      draft.mainPosts.unshift(action.data);//새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading=true;\r\n      draft.removePostDone=false;\r\n      draft.removePostError=null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading=false;\r\n      draft.removePostDone=true;\r\n      draft.mainPosts = draft.mainPosts.filter((v)=>{ v.id !== action.data})\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading=false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone=false;\r\n      draft.addCommentError= null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      const post = draft.mainPosts.find((v)=>v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentDone=true;\r\n      draft.addCommentError= null;\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break; //return draft해도 되지않나...\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default reducer;\r\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}