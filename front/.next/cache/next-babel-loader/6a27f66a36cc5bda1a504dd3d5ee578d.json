{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from \"immer\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n/*map(): 배열내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열 반환\r\nnumber개의 원소의 array를 fill()로 초기화한 다음 각각의 요소에 map 함수 실행\r\nreturn : 배열 리턴\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=>({\r\n  id : shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }]\r\n}));\r\n*/\n//action\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\nexport var ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\nexport var ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //action creator : 파라미터를 받아와서 액션객체 형태로 만들어준다.\n//안쓰는거같은데?? 다른 파일에서 불러와서 사용\n//나중에 없애고 실행해볼까 ???/\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n}; //()=>()인 경우는 괄호 안이 return\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; //Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\n//produce state, 상태의 결과 함수\n//return produce()인 것\n//draft가 state로 바뀌는것\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts); //action.data에 load한 배열 들어있음, action.data+draft.mainPosts\n\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data); //새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        }); //data안에 postId, userId, content\n\n        post.Comments.unshift(action.data.content); ///커멘트 올릴때 데이터 형식이 어떻게 되는데?\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n      //return draft해도 되지않나...\n    }\n  });\n};\n\nexport default reducer;\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/reducers/post.js"],"names":["shortId","faker","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POSTS_REQUEST","ADD_POSTS_SUCCESS","ADD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","id","post","find","PostId","Comments","content"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport faker from 'faker';\r\n\r\nimport produce from \"immer\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths:[],\r\n  hasMorePosts: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n/*map(): 배열내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열 반환\r\nnumber개의 원소의 array를 fill()로 초기화한 다음 각각의 요소에 map 함수 실행\r\nreturn : 배열 리턴\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=>({\r\n  id : shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }]\r\n}));\r\n*/\r\n\r\n//action\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\r\nexport const ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\r\nexport const ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n\r\n//action creator : 파라미터를 받아와서 액션객체 형태로 만들어준다.\r\n//안쓰는거같은데?? 다른 파일에서 불러와서 사용\r\n//나중에 없애고 실행해볼까 ???/\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\n//()=>()인 경우는 괄호 안이 return\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n//Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\r\n//produce state, 상태의 결과 함수\r\n//return produce()인 것\r\n//draft가 state로 바뀌는것\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);//action.data에 load한 배열 들어있음, action.data+draft.mainPosts\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE: \r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone=false;\r\n      draft.addPostError=null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone=true;\r\n      draft.mainPosts.unshift(action.data);//새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading=true;\r\n      draft.removePostDone=false;\r\n      draft.removePostError=null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading=false;\r\n      draft.removePostDone=true;\r\n      draft.mainPosts = draft.mainPosts.filter((v)=>{ v.id !== action.data})\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading=false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone=false;\r\n      draft.addCommentError= null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      const post = draft.mainPosts.find((v)=>v.id === action.data.PostId);//data안에 postId, userId, content\r\n      post.Comments.unshift(action.data.content);///커멘트 올릴때 데이터 형식이 어떻게 되는데?\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentDone=true;\r\n      break;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break; //return draft해도 되지않나...\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default reducer;\r\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}