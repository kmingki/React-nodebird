{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { CREATE_CHAT_REQUEST, CREATE_CHAT_SUCCESS, CREATE_CHAT_FAILURE, LOAD_ROOM_REQUEST, LOAD_ROOM_SUCCESS, LOAD_ROOM_FAILURE } from '../reducers/chat';\n\nfunction createChatAPI(data) {\n  return axios.post('/room', data);\n}\n\nfunction* createChat(action) {\n  try {\n    const result = yield call(createChatAPI, action.data);\n    yield put({\n      type: CREATE_CHAT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: CREATE_CHAT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* loadRoom(action) {\n  try {\n    const result = yield call(loadRoomAPI, action.data);\n    yield put({\n      type: LOAD_ROOM_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_ROOM_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchCreateChat() {\n  yield takeLatest(CREATE_CHAT_REQUEST, createChat);\n}\n\nfunction* watchLoadRoom() {\n  yield takeLatest(LOAD_ROOM_REQUEST, loadRoom);\n}\n\nexport default function* chatSaga() {\n  yield all([fork(watchCreateChat), fork(watchLoadRoom)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/sagas/chat.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","call","CREATE_CHAT_REQUEST","CREATE_CHAT_SUCCESS","CREATE_CHAT_FAILURE","LOAD_ROOM_REQUEST","LOAD_ROOM_SUCCESS","LOAD_ROOM_FAILURE","createChatAPI","data","post","createChat","action","result","type","err","console","error","response","loadRoom","loadRoomAPI","watchCreateChat","watchLoadRoom","chatSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,QAA5C,EAAsDC,IAAtD,QAAkE,oBAAlE;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,iBANJ,QAOO,kBAPP;;AAUA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAOf,KAAK,CAACgB,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACH;;AAED,UAAWE,UAAX,CAAsBC,MAAtB,EAA8B;AAC1B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACO,aAAD,EAAgBI,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMX,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEX,mBADA;AAENM,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEV,mBADA;AAENa,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAWU,QAAX,CAAoBP,MAApB,EAA4B;AACxB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACmB,WAAD,EAAcR,MAAM,CAACH,IAArB,CAAzB;AACA,UAAMX,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAER,iBADA;AAENG,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEP,iBADA;AAENU,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAWY,eAAX,GAA6B;AACzB,QAAMtB,UAAU,CAACG,mBAAD,EAAsBS,UAAtB,CAAhB;AACH;;AAED,UAAWW,aAAX,GAA2B;AACvB,QAAMvB,UAAU,CAACM,iBAAD,EAAoBc,QAApB,CAAhB;AACH;;AAED,eAAe,UAAWI,QAAX,GAAsB;AACjC,QAAM5B,GAAG,CAAC,CACNE,IAAI,CAACwB,eAAD,CADE,EAENxB,IAAI,CAACyB,aAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    CREATE_CHAT_REQUEST,\r\n    CREATE_CHAT_SUCCESS,\r\n    CREATE_CHAT_FAILURE,\r\n    LOAD_ROOM_REQUEST,\r\n    LOAD_ROOM_SUCCESS,\r\n    LOAD_ROOM_FAILURE,\r\n} from '../reducers/chat';\r\n\r\n\r\nfunction createChatAPI(data) {\r\n    return axios.post('/room', data); \r\n}\r\n\r\nfunction * createChat(action) {\r\n    try{\r\n        const result = yield call(createChatAPI, action.data);\r\n        yield put({\r\n            type: CREATE_CHAT_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: CREATE_CHAT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * loadRoom(action) {\r\n    try{\r\n        const result = yield call(loadRoomAPI, action.data);\r\n        yield put({\r\n            type: LOAD_ROOM_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_ROOM_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchCreateChat() {\r\n    yield takeLatest(CREATE_CHAT_REQUEST, createChat);\r\n}\r\n\r\nfunction * watchLoadRoom() {\r\n    yield takeLatest(LOAD_ROOM_REQUEST, loadRoom);\r\n}\r\n\r\nexport default function * chatSaga() {\r\n    yield all([\r\n        fork(watchCreateChat),\r\n        fork(watchLoadRoom)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}