{"ast":null,"code":"//put() redux store에 dispatch하는 역할\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.patch(`post/${data}/unlike`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data); //console.log(result.data);\n\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(`/posts?lastId=${data || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // data == text \n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  //action\n  try {\n    const result = yield call(addPostAPI, action.data); //action.data == text\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //post reducer와 user reducer\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data); //action.data == postid\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); //form data는 그대로 전송해야함\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchHashtagPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/sagas/post.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","console","error","response","unlikePostAPI","patch","unlikePost","likePostAPI","likePost","loadPostsAPI","get","loadPosts","loadPostAPI","loadPost","addPostAPI","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","uploadImagesAPI","uploadImages","loadUserPostsAPI","lastId","loadUserPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","watchRetweet","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPosts","watchLoadPost","watchRemovePost","watchAddComment","watchUploadImages","watchLoadUserPosts","watchHashtagPosts","postSaga"],"mappings":"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","sourcesContent":["//put() redux store에 dispatch하는 역할\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POST_FAILURE,\r\n    LOAD_POST_REQUEST,\r\n    LOAD_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n  } from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data){\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction * retweet(action) {\r\n\r\n    try{\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n    \r\n\r\n\r\n}\r\nfunction unlikePostAPI(data) {\r\n    return axios.patch(`post/${data}/unlike`);\r\n}\r\n\r\nfunction * unlikePost(action) {\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        //console.log(result.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction * likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: error.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get(`/posts?lastId=${data || 0}`);\r\n}\r\n\r\nfunction * loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction * loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) { // data == text \r\n    \r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction * addPost(action){ //action\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); //action.data == text\r\n        \r\n        yield put({ \r\n            type : ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        \r\n        yield put({ //post reducer와 user reducer\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n        \r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error:err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction * removePost(action) {\r\n    try{\r\n        const result = yield call(removePostAPI, action.data); //action.data == postid\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction * addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data){\r\n    return axios.post('/post/images', data); //form data는 그대로 전송해야함\r\n}\r\n\r\nfunction * uploadImages(action) {\r\n    try{\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId){\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); \r\n}\r\n\r\nfunction * loadUserPosts(action) {\r\n    try{\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); \r\n}\r\n\r\nfunction * loadHashtagPosts(action) {\r\n    try{\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction * watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction * watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction * watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction * watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction * watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction * watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction * watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction * watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction * watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\nfunction * watchHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\nexport default function * postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchHashtagPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}