{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\node-bird\\\\react-nodebird\\\\front\\\\components\\\\PostForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { Form, Input, Button, Card, Avatar } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CameraOutlined } from '@ant-design/icons';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var imageInput = useRef();\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\n\n  var onChangeImages = useCallback(function (e) {\n    //console.log('images', e.target.files); 유사배열, File객체\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click(); //click() - element를 마우스로 클릭한 것으로 한다.\n  }, [imageInput.current]);\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p); //req.body.image\n    });\n    formData.append('content', text); //req.body.content\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  }); //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\n  //e.target - 특정 이벤트가 발생하는 태그\n  //e.target.name - 태그의 이름\n  //e.target.value - 태그에 입력된느 값\n\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        children: me.nickname[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, _this),\n      title: me.nickname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '10px 0 20px'\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n        bordered: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          multiple: true,\n          hidden: true,\n          ref: imageInput,\n          onChange: onChangeImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"dashed\",\n          onClick: onClickImageUpload,\n          children: /*#__PURE__*/_jsxDEV(CameraOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 64\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          style: {\n            \"float\": 'right'\n          },\n          htmlType: \"submit\",\n          children: \"\\uC9F9\\uC9F9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: imagePaths.map(function (v, i) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'inline-block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"http://localhost:3065/\".concat(v),\n              style: {\n                width: '200px'\n              },\n              alt: v\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: onRemoveImage(i),\n                children: \"\\uC81C\\uAC70\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, _this)]\n          }, v, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(PostForm, \"V/cR6VzXgR/llROF3O0h7PaIKx8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/components/PostForm.js"],"names":["React","useCallback","useState","useRef","useEffect","Form","Input","Button","Card","Avatar","useSelector","useDispatch","CameraOutlined","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","state","post","imagePaths","addPostDone","user","me","imageInput","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","data","onClickImageUpload","current","click","onSubmit","trim","alert","formData","p","onRemoveImage","index","onChangeText","value","nickname","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from 'react';\r\nimport { Form, Input, Button, Card, Avatar } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { CameraOutlined } from '@ant-design/icons';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const { me } = useSelector((state) => state.user);\r\n     \r\n  const imageInput = useRef();\r\n  \r\n\r\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\r\n\r\n  const onChangeImages = useCallback((e)=>{\r\n    //console.log('images', e.target.files); 유사배열, File객체\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f)=>{\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(()=>{\r\n    imageInput.current.click();\r\n    //click() - element를 마우스로 클릭한 것으로 한다.\r\n}, [imageInput.current]);\r\n  \r\n  useEffect(() => { \r\n    if(addPostDone) {\r\n      setText('');\r\n      \r\n    }\r\n  },[addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);//req.body.image\r\n    });\r\n    formData.append('content', text);//req.body.content\r\n\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]); \r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    })\r\n  });\r\n  //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\r\n  //e.target - 특정 이벤트가 발생하는 태그\r\n  //e.target.name - 태그의 이름\r\n  //e.target.value - 태그에 입력된느 값\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  \r\n    return (\r\n      <Card>\r\n        <Card.Meta\r\n        avatar={<Avatar>{me.nickname[0]}</Avatar>}\r\n        title={me.nickname}\r\n        />\r\n        <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n          <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" bordered={false}/>\r\n          <div>\r\n            <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n            <Button type=\"dashed\" onClick={onClickImageUpload}><CameraOutlined /></Button>\r\n            <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n          </div>\r\n          <div>\r\n            {imagePaths.map((v, i) => {\r\n              return (\r\n                <div key={v} style={{ display: 'inline-block' }}>\r\n                  <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                  <div>\r\n                    <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </Form>\r\n        </Card>\r\n      );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}