{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(createChat),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchCreateChat),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(chatSaga);\n\nimport axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { CREATE_CHAT_REQUEST, CREATE_CHAT_SUCCESS, CREATE_CHAT_FAILURE } from '../reducers/chat';\n\nfunction createChatAPI(data) {\n  console.log('saga done');\n  return axios.post('/room', data);\n}\n\nfunction createChat(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function createChat$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(createChatAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: CREATE_CHAT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: CREATE_CHAT_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchCreateChat() {\n  return _regeneratorRuntime.wrap(function watchCreateChat$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(CREATE_CHAT_REQUEST, createChat);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function chatSaga() {\n  return _regeneratorRuntime.wrap(function chatSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchCreateChat)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/sagas/chat.js"],"names":["createChat","watchCreateChat","chatSaga","axios","all","delay","fork","put","takeLatest","throttle","call","CREATE_CHAT_REQUEST","CREATE_CHAT_SUCCESS","CREATE_CHAT_FAILURE","createChatAPI","data","console","log","post","action","result","type","error","response"],"mappings":";;oDAeWA,U;qDAiBAC,e;qDAIeC,Q;;AApC1B,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,QAA5C,EAAsDC,IAAtD,QAAkE,oBAAlE;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,QAIO,kBAJP;;AAOA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAOd,KAAK,CAACe,IAAN,CAAW,OAAX,EAAoBH,IAApB,CAAP;AACH;;AAED,SAAWf,UAAX,CAAsBmB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMT,IAAI,CAACI,aAAD,EAAgBK,MAAM,CAACJ,IAAvB,CAAV;;AAFvB;AAEcK,UAAAA,MAFd;AAAA;AAGQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAET,mBADA;AAENG,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQC,UAAAA,OAAO,CAACM,KAAR;AARR;AASQ,iBAAMf,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAER,mBADA;AAENS,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAWd,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACG,mBAAD,EAAsBX,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAWE,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNE,IAAI,CAACL,eAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    CREATE_CHAT_REQUEST,\r\n    CREATE_CHAT_SUCCESS,\r\n    CREATE_CHAT_FAILURE,\r\n} from '../reducers/chat';\r\n\r\n\r\nfunction createChatAPI(data) {\r\n    console.log('saga done');\r\n    return axios.post('/room', data); \r\n}\r\n\r\nfunction * createChat(action) {\r\n    try{\r\n        const result = yield call(createChatAPI, action.data);\r\n        yield put({\r\n            type: CREATE_CHAT_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: CREATE_CHAT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction * watchCreateChat() {\r\n    yield takeLatest(CREATE_CHAT_REQUEST, createChat);\r\n}\r\n\r\nexport default function * chatSaga() {\r\n    yield all([\r\n        fork(watchCreateChat),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}