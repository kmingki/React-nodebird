{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\chatter\\\\chatter\\\\front\\\\pages\\\\main.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { message } from 'antd';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport Layout from '../components/Layout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Main = function Main() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      loadPostsError = _useSelector2.loadPostsError,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    if (retweetError) {\n      return alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      // scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id // 마지막 post의 id\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return window.removeEventListener('scroll', onScroll); // 메모리누수로 인한 스크롤 이벤트 지우기\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  useEffect(function () {\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n  }, []);\n  useEffect(function () {\n    if (loadPostsError) {\n      message.info(loadPostsError);\n    }\n  }, [loadPostsError]);\n\n  var mainContents = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }, _this), mainPosts.map(function (post) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 33\n      }, _this);\n    })]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: mainContents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(Main, \"x7kZerIzhFCgAFI14KKQaFjM0QA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Main;\nexport var __N_SSP = true;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/pages/main.js"],"names":["React","useEffect","useDispatch","useSelector","message","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","Layout","Main","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","loadPostsError","retweetError","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","data","length","id","addEventListener","removeEventListener","info","mainContents","map"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport { message } from 'antd';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport Layout from '../components/Layout';\r\n\r\nconst Main = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts,\r\n    loadPostsLoading, loadPostsError, retweetError } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      return alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n      if (window.scrollY + document.documentElement.clientHeight\r\n        > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            data: mainPosts[mainPosts.length - 1]?.id, // 마지막 post의 id\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n\r\n    return (window.removeEventListener('scroll', onScroll)); // 메모리누수로 인한 스크롤 이벤트 지우기\r\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loadPostsError) {\r\n      message.info(loadPostsError);\r\n    }\r\n  }, [loadPostsError]);\r\n\r\n  const mainContents = (\r\n    <>\r\n      { me && <PostForm />}\r\n      {mainPosts.map((post) => (<PostCard key={post.id} post={post} />))}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Layout>{mainContents}</Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  /*\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  */\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n\r\n  context.store.dispatch(END); // REQUEST가 SUCCESS가 될때까지 기다려준다.\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}