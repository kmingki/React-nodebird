{"ast":null,"code":"//import shortId from 'shortid';\n//import faker from 'faker';\nimport produce from \"immer\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unLikePostLoading: false,\n  unLikePostDone: false,\n  unLikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //action\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\nexport const ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\nexport const ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\n//produce state, 상태의 결과 함수\n//return produce()인 것\n//draft가 state로 바뀌는것\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId); //post.Likers.push({ id: action.data.UserId });\n\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        draft.likePostError = null;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostDone = false;\n      draft.likePostError = action.error;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unLikePostLoading = true;\n      draft.unLikePostDone = false;\n      draft.unLikePostError = null;\n\n    case UNLIKE_POST_SUCCESS:\n      draft.unLikePostLoading = false;\n      draft.unLikePostDone = true;\n      draft.unLikePostError = null;\n\n    case UNLIKE_POST_FAILURE:\n      draft.unLikePostLoading = false;\n      draft.unLikePostDone = false;\n      draft.unLikePostError = action.error;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts); //action.data에 load한 배열 들어있음, action.data + draft.mainPosts\n\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data); //새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => {\n        v.id !== action.data;\n      });\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n    //return draft해도 되지않나...\n  }\n});\n\nexport default reducer;\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unLikePostLoading","unLikePostDone","unLikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POSTS_REQUEST","ADD_POSTS_SUCCESS","ADD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","draft","type","post","find","v","id","data","PostId","error","concat","length","unshift","filter","Comments"],"mappings":"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","sourcesContent":["//import shortId from 'shortid';\r\n//import faker from 'faker';\r\nimport produce from \"immer\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths:[],\r\n  hasMorePosts: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unLikePostLoading: false,\r\n  unLikePostDone: false,\r\n  unLikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n//action\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\r\nexport const ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\r\nexport const ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n//Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\r\n//produce state, 상태의 결과 함수\r\n//return produce()인 것\r\n//draft가 state로 바뀌는것\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      //post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      draft.likePostError = null;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = action.error;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unLikePostLoading = true;\r\n      draft.unLikePostDone = false;\r\n      draft.unLikePostError = null;\r\n    case UNLIKE_POST_SUCCESS:\r\n      draft.unLikePostLoading = false;\r\n      draft.unLikePostDone = true;\r\n      draft.unLikePostError = null;\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unLikePostLoading = false;\r\n      draft.unLikePostDone = false;\r\n      draft.unLikePostError = action.error;\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);//action.data에 load한 배열 들어있음, action.data + draft.mainPosts\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE: \r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone=false;\r\n      draft.addPostError=null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone=true;\r\n      draft.mainPosts.unshift(action.data);//새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading=true;\r\n      draft.removePostDone=false;\r\n      draft.removePostError=null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading=false;\r\n      draft.removePostDone=true;\r\n      draft.mainPosts = draft.mainPosts.filter((v)=>{ v.id !== action.data})\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading=false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone=false;\r\n      draft.addCommentError= null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v)=>v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentDone=true;\r\n      draft.addCommentError= null;\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break; //return draft해도 되지않나...\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default reducer;\r\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}