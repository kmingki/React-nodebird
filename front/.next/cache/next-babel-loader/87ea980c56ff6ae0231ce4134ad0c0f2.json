{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\node-bird\\\\react-nodebird\\\\front\\\\components\\\\PostForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { Form, Input, Button, Card, Avatar, Upload } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CameraOutlined, EnvironmentOutlined, PlusOutlined } from '@ant-design/icons';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getBase64(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n\n    reader.onerror = function (error) {\n      return reject(error);\n    };\n  });\n}\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var dispatch = useDispatch();\n  var imageInput = useRef();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var _useState2 = useState(false),\n      previewVisible = _useState2[0],\n      setpreviewVisible = _useState2[1];\n\n  var _useState3 = useState(''),\n      previewImage = _useState3[0],\n      setPreviewImage = _useState3[1];\n\n  var _useState4 = useState(''),\n      previewTitle = _useState4[0],\n      setPreviewTitle = _useState4[1];\n\n  var handlePreview = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!file.url && !file.preview)) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return getBase64(file.originFileObj);\n\n            case 3:\n              file.preview = _context.sent;\n\n            case 4:\n              setPreviewImage(file.url || file.preview);\n              setpreviewVisible(true);\n              setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handlePreview(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\n\n\n  var onChangeImages = useCallback(function (e) {\n    //console.log('images', e.target.files); 유사배열, File객체\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click(); //click() - element를 마우스로 클릭한 것으로 한다.\n  }, [imageInput.current]);\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p); //req.body.image\n    });\n    formData.append('content', text); //req.body.content\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  }); //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\n  //e.target - 특정 이벤트가 발생하는 태그\n  //e.target.name - 태그의 이름\n  //e.target.value - 태그에 입력된느 값\n\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n\n  var uploadButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, _this);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        children: me.nickname[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }, _this),\n      title: me.nickname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '10px 0 20px'\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n        bordered: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '10px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          multiple: true,\n          hidden: true,\n          ref: imageInput,\n          onChange: onChangeImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"text\",\n          onClick: onClickImageUpload,\n          children: /*#__PURE__*/_jsxDEV(CameraOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 60\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"text\",\n          onClick: onClickImageUpload,\n          children: /*#__PURE__*/_jsxDEV(EnvironmentOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 60\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          shape: \"round\",\n          style: {\n            \"float\": 'right'\n          },\n          htmlType: \"submit\",\n          children: \"\\uC5C5\\uB85C\\uB4DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Upload, {\n          listType: \"picture-card\",\n          fileList: imagePaths,\n          onPreview: handlePreview,\n          children: imagePaths.length >= 8 ? null : uploadButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PostForm, \"okxhFp2OfU6TSk6xSKuPH/XzWTk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/components/PostForm.js"],"names":["React","useCallback","useState","useRef","useEffect","Form","Input","Button","Card","Avatar","Upload","useSelector","useDispatch","CameraOutlined","EnvironmentOutlined","PlusOutlined","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","PostForm","dispatch","imageInput","text","setText","state","post","imagePaths","addPostDone","user","me","previewVisible","setpreviewVisible","previewImage","setPreviewImage","previewTitle","setPreviewTitle","handlePreview","url","preview","originFileObj","name","substring","lastIndexOf","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","data","onClickImageUpload","current","click","onSubmit","trim","alert","formData","p","onRemoveImage","index","onChangeText","value","uploadButton","marginTop","nickname","margin","length"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from 'react';\r\nimport { Form, Input, Button, Card, Avatar, Upload } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { CameraOutlined, EnvironmentOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nfunction getBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const imageInput = useRef();\r\n\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const { me } = useSelector((state) => state.user);\r\n     \r\n  const [ previewVisible, setpreviewVisible ] = useState(false);\r\n  const [ previewImage, setPreviewImage ] = useState('');\r\n  const [ previewTitle, setPreviewTitle ] = useState('');\r\n\r\n  const handlePreview = async file => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n\r\n    setPreviewImage(file.url || file.preview);\r\n    setpreviewVisible(true);\r\n    setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));\r\n  };\r\n\r\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\r\n\r\n  const onChangeImages = useCallback((e)=>{\r\n    //console.log('images', e.target.files); 유사배열, File객체\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f)=>{\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(()=>{\r\n    imageInput.current.click();\r\n    //click() - element를 마우스로 클릭한 것으로 한다.\r\n}, [imageInput.current]);\r\n  \r\n  useEffect(() => { \r\n    if(addPostDone) {\r\n      setText('');\r\n      \r\n    }\r\n  },[addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);//req.body.image\r\n    });\r\n    formData.append('content', text);//req.body.content\r\n\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]); \r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    })\r\n  });\r\n  //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\r\n  //e.target - 특정 이벤트가 발생하는 태그\r\n  //e.target.name - 태그의 이름\r\n  //e.target.value - 태그에 입력된느 값\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  \r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Meta\r\n      avatar={<Avatar>{me.nickname[0]}</Avatar>}\r\n      title={me.nickname}\r\n      />\r\n      <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n        <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" bordered={false}/>\r\n        <div style={{ margin: '10px 0'}}>\r\n          <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n          <Button type=\"text\" onClick={onClickImageUpload}><CameraOutlined /></Button>\r\n          <Button type=\"text\" onClick={onClickImageUpload}><EnvironmentOutlined /></Button>\r\n          <Button type=\"primary\" shape=\"round\" style={{ float: 'right' }} htmlType=\"submit\">업로드</Button>\r\n        </div>\r\n        <div>\r\n          <Upload\r\n          listType=\"picture-card\"\r\n          fileList={imagePaths}\r\n          onPreview={handlePreview}\r\n          >\r\n            {imagePaths.length >= 8 ? null : uploadButton}\r\n            </Upload>\r\n        </div>\r\n      </Form>\r\n      </Card>\r\n    );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}