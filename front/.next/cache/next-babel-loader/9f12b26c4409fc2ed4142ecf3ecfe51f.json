{"ast":null,"code":"import { all, delay, fork, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n} /// delay() => Promise 가 한번 resolve 되고 나면, 미들웨어는 Saga 를 다시 작동시키면서, 다음 yield 까지 코드를 실행합니다.\n\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data //err.response\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n} //put():특정 액션을 dispatch한다.\n\n\nfunction* signUp() {\n  try {\n    //const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/user.js"],"names":["all","delay","fork","takeLatest","put","axios","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","post","logIn","action","type","err","console","error","response","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,UAA3B,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,eARJ,EASIC,eATJ,EAUIC,eAVJ,EAWIC,eAXJ,EAYIC,eAZJ,EAaIC,gBAbJ,EAcIC,gBAdJ,EAeIC,gBAfJ,QAgBS,kBAhBT;;AAkBA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOjB,KAAK,CAACkB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH,C,CAED;;;AACA,UAAWE,KAAX,CAAkBC,MAAlB,EAA0B;AACtB,MAAG;AACC;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMG,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEf,cADA;AAENW,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMK,GAAN,EAAU;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEjB,cADA;AAENoB,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaR,IAFd,CAEoB;;AAFpB,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,GAAqB;AACjB,SAAO1B,KAAK,CAACkB,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAWS,MAAX,GAAoB;AAChB,MAAI;AACA;AACA,UAAM/B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMG,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOa,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEd,eADA;AAENiB,MAAAA,KAAK,EAAGF,GAAG,CAACG,QAAJ,CAAaR;AAFf,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,SAAT,GAAqB;AACjB,SAAO5B,KAAK,CAACkB,IAAN,CAAW,aAAX,CAAP;AACH,C,CAED;;;AACA,UAAWW,MAAX,GAAmB;AACf,MAAG;AACC;AACA,UAAMjC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMG,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAET;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOU,GAAP,EAAY;AACV,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEX,eADA;AAENc,MAAAA,KAAK,EAAGF,GAAG,CAACG,QAAJ,CAAaR;AAFf,KAAD,CAAT;AAIH;AACJ;;AAED,SAASa,SAAT,GAAqB;AACjB,SAAO9B,KAAK,CAACkB,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAWa,MAAX,CAAkBX,MAAlB,EAA0B;AACtB,MAAG;AACC;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMG,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAElB,cADA;AAENc,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOK,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAACpB,cADC;AAENuB,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASe,WAAT,GAAuB;AACnB,SAAOhC,KAAK,CAACkB,IAAN,CAAW,eAAX,CAAP;AACH;;AAED,UAAWe,QAAX,CAAoBb,MAApB,EAA4B;AACxB,MAAG;AACC,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMG,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEN,gBADA;AAENE,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAOK,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAER,gBADA;AAENW,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAWiB,WAAX,GAAyB;AACrB,QAAMpC,UAAU,CAACI,cAAD,EAAiB6B,MAAjB,CAAhB;AACH;;AAED,UAAWI,aAAX,GAA2B;AACvB,QAAMrC,UAAU,CAACgB,gBAAD,EAAmBmB,QAAnB,CAAhB;AACH;;AAED,UAAWG,UAAX,GAAwB;AACpB,QAAMtC,UAAU,CAACO,cAAD,EAAiBc,KAAjB,CAAhB;AACH;;AAED,UAAWkB,WAAX,GAAyB;AACrB,QAAMvC,UAAU,CAACU,eAAD,EAAkBmB,MAAlB,CAAhB;AACH;;AAED,UAAWW,WAAX,GAAyB;AACrB,QAAMxC,UAAU,CAACa,eAAD,EAAkBkB,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAWU,QAAX,GAAqB;AAChC,QAAM5C,GAAG,CAAC,CACNE,IAAI,CAACqC,WAAD,CADE,EAENrC,IAAI,CAACsC,aAAD,CAFE,EAGNtC,IAAI,CAACuC,UAAD,CAHE,EAINvC,IAAI,CAACwC,WAAD,CAJE,EAKNxC,IAAI,CAACyC,WAAD,CALE,CAAD,CAAT;AAOH","sourcesContent":["import { all, delay, fork, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS,\r\n  } from '../reducers/user';\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\n/// delay() => Promise 가 한번 resolve 되고 나면, 미들웨어는 Saga 를 다시 작동시키면서, 다음 yield 까지 코드를 실행합니다.\r\nfunction * logIn (action) {\r\n    try{\r\n        //const result = yield call(logInAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    }catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data, //err.response\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction * logOut() {\r\n    try {\r\n        //const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post('/api/signUp');\r\n}\r\n\r\n//put():특정 액션을 dispatch한다.\r\nfunction * signUp(){\r\n    try{\r\n        //const result = yield call(signUpAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction followAPI() {\r\n    return axios.post('/api/follow');\r\n}\r\n\r\nfunction * follow(action) {\r\n    try{\r\n        //const result = yield call(followAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n    return axios.post('/api/unfollow');\r\n}\r\n\r\nfunction * unfollow(action) {\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction * watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction * watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction * watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction * watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function * userSaga(){\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}