{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\node-bird\\\\react-nodebird\\\\front\\\\components\\\\PostForm.js\";\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { Form, Input, Button, Card, Avatar } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CameraOutlined, EnvironmentOutlined } from '@ant-design/icons';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const imageInput = useRef();\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\n\n  const onChangeImages = useCallback(e => {\n    //console.log('images', e.target.files); 유사배열, File객체\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click(); //click() - element를 마우스로 클릭한 것으로 한다.\n  }, [imageInput.current]);\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p); //req.body.image\n    });\n    formData.append('content', text); //req.body.content\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }); //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\n  //e.target - 특정 이벤트가 발생하는 태그\n  //e.target.name - 태그의 이름\n  //e.target.value - 태그에 입력된느 값\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        children: me.nickname[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this),\n      title: me.nickname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '10px 0 20px'\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n        bordered: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          multiple: true,\n          hidden: true,\n          ref: imageInput,\n          onChange: onChangeImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"text\",\n          onClick: onClickImageUpload,\n          children: /*#__PURE__*/_jsxDEV(CameraOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"text\",\n          onClick: onClickImageUpload,\n          children: /*#__PURE__*/_jsxDEV(EnvironmentOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          shape: \"round\",\n          style: {\n            float: 'right'\n          },\n          htmlType: \"submit\",\n          children: \"\\uC9F9\\uC9F9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: imagePaths.map((v, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'inline-block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:3065/${v}`,\n              style: {\n                width: '200px'\n              },\n              alt: v\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: onRemoveImage(i),\n                children: \"\\uC81C\\uAC70\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)]\n          }, v, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/components/PostForm.js"],"names":["React","useCallback","useState","useRef","useEffect","Form","Input","Button","Card","Avatar","useSelector","useDispatch","CameraOutlined","EnvironmentOutlined","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","imagePaths","addPostDone","state","post","me","user","imageInput","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","data","onClickImageUpload","current","click","onSubmit","trim","alert","formData","p","onRemoveImage","index","onChangeText","value","nickname","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from 'react';\r\nimport { Form, Input, Button, Card, Avatar } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { CameraOutlined, EnvironmentOutlined } from '@ant-design/icons';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const { me } = useSelector((state) => state.user);\r\n     \r\n  const imageInput = useRef();\r\n  \r\n\r\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\r\n\r\n  const onChangeImages = useCallback((e)=>{\r\n    //console.log('images', e.target.files); 유사배열, File객체\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f)=>{\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(()=>{\r\n    imageInput.current.click();\r\n    //click() - element를 마우스로 클릭한 것으로 한다.\r\n}, [imageInput.current]);\r\n  \r\n  useEffect(() => { \r\n    if(addPostDone) {\r\n      setText('');\r\n      \r\n    }\r\n  },[addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);//req.body.image\r\n    });\r\n    formData.append('content', text);//req.body.content\r\n\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]); \r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    })\r\n  });\r\n  //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\r\n  //e.target - 특정 이벤트가 발생하는 태그\r\n  //e.target.name - 태그의 이름\r\n  //e.target.value - 태그에 입력된느 값\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  \r\n    return (\r\n      <Card>\r\n        <Card.Meta\r\n        avatar={<Avatar>{me.nickname[0]}</Avatar>}\r\n        title={me.nickname}\r\n        />\r\n        <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n          <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" bordered={false}/>\r\n          <div>\r\n            <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n            <Button type=\"text\" onClick={onClickImageUpload}><CameraOutlined /></Button>\r\n            <Button type=\"text\" onClick={onClickImageUpload}><EnvironmentOutlined /></Button>\r\n            <Button type=\"primary\" shape=\"round\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n          </div>\r\n          <div>\r\n            {imagePaths.map((v, i) => {\r\n              return (\r\n                <div key={v} style={{ display: 'inline-block' }}>\r\n                  <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                  <div>\r\n                    <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </Form>\r\n        </Card>\r\n      );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}