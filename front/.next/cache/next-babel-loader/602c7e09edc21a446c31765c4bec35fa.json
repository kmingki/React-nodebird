{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\n//put():특정 액션을 dispatch한다.\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/user.js"],"names":["signUp","watchSignUp","userSaga","delay","put","type","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","error","response","data","takeLatest","SIGN_UP_REQUEST","all","fork","watchFollow","watchUnfollow","watchLogIn","watchLogOut"],"mappings":";;oDAGWA,M;qDAeAC,W;qDAIeC,Q;;AApB1B;AACA,SAAWF,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMG,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEC;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMF,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEE,eADA;AAENC,YAAAA,KAAK,EAAG,YAAIC,QAAJ,CAAaC;AAFf,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAWT,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMU,UAAU,CAACC,eAAD,EAAkBZ,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAWE,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMW,GAAG,CAAC,CACNC,IAAI,CAACC,WAAD,CADE,EAEND,IAAI,CAACE,aAAD,CAFE,EAGNF,IAAI,CAACG,UAAD,CAHE,EAINH,IAAI,CAACI,WAAD,CAJE,EAKNJ,IAAI,CAACb,WAAD,CALE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\r\n\r\n//put():특정 액션을 dispatch한다.\r\nfunction * signUp(){\r\n    try{\r\n        //const result = yield call(signUpAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function * userSaga(){\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}