{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from \"immer\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //load post에 쓰이는것\n//map: 배열내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열 반환\n//number개의 원소의 array를 fill()로 초기화 각각의 요소에 map 함수 실행\n//return : 배열 리턴\n\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n}; //action\n//action의 type은 일반적으로 문자열 상수\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\nexport var ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\nexport var ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //action creator : 파라미터를 받아와서 액션객체 형태로 만들어준다.\n//안쓰는거같은데?? 다른 파일에서 불러와서 사용\n//나중에 없애고 실행해볼까 ???/\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n}; //()=>()인 경우는 괄호 안이 return\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; //add post 에 쓰이는 것 \n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    //post의 id\n    content: data.content,\n    User: {\n      //작성자의 id\n      id: 1,\n      nickname: '미니'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '미니'\n    }\n  };\n}; //Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\n//produce state, 상태의 결과 함수\n//return produce()인 것\n//draft가 state로 바뀌는것\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts); //action.data에 load한 배열 들어있음, action.data+draft.mainPosts\n\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error; //action.error?\n\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); //새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        }); //data안에 postId, userId, content\n\n        post.Comments.unshift(dummyComment(action.data.content));\n        dddddd; ///커멘트 올릴때 데이터 형식이 어떻게 되는데?\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n      //return draft해도 되지않나...\n    }\n  });\n};\n\nexport default reducer;\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/reducers/post.js"],"names":["shortId","faker","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POSTS_REQUEST","ADD_POSTS_SUCCESS","ADD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId","dddddd"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport faker from 'faker';\r\n\r\nimport produce from \"immer\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths:[],\r\n  hasMorePosts: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n//load post에 쓰이는것\r\n//map: 배열내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열 반환\r\n//number개의 원소의 array를 fill()로 초기화 각각의 요소에 map 함수 실행\r\n//return : 배열 리턴\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=>({\r\n  id : shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }]\r\n}));\r\n\r\n\r\n//action\r\n//action의 type은 일반적으로 문자열 상수\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\r\nexport const ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\r\nexport const ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n\r\n//action creator : 파라미터를 받아와서 액션객체 형태로 만들어준다.\r\n//안쓰는거같은데?? 다른 파일에서 불러와서 사용\r\n//나중에 없애고 실행해볼까 ???/\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\n//()=>()인 경우는 괄호 안이 return\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n//add post 에 쓰이는 것 \r\nconst dummyPost = (data) => ({\r\n  id: data.id, //post의 id\r\n  content: data.content,\r\n  User : { //작성자의 id\r\n    id:1,\r\n    nickname: '미니',\r\n  },\r\n  Images:[],\r\n  Comments:[],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id:shortId.generate(),\r\n  content:data,\r\n  User:{\r\n    id:1,\r\n    nickname:'미니'\r\n  }\r\n});\r\n\r\n//Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\r\n//produce state, 상태의 결과 함수\r\n//return produce()인 것\r\n//draft가 state로 바뀌는것\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);//action.data에 load한 배열 들어있음, action.data+draft.mainPosts\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE: \r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error; //action.error?\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone=false;\r\n      draft.addPostError=null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone=true;\r\n      draft.mainPosts.unshift(dummyPost(action.data));//새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading=true;\r\n      draft.removePostDone=false;\r\n      draft.removePostError=null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading=false;\r\n      draft.removePostDone=true;\r\n      draft.mainPosts = draft.mainPosts.filter((v)=>{ v.id !== action.data})\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading=false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone=false;\r\n      draft.addCommentError= null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      const post = draft.mainPosts.find((v)=>v.id === action.data.postId);//data안에 postId, userId, content\r\n      post.Comments.unshift(dummyComment(action.data.content));dddddd///커멘트 올릴때 데이터 형식이 어떻게 되는데?\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentDone=true;\r\n      break;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break; //return draft해도 되지않나...\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default reducer;\r\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}