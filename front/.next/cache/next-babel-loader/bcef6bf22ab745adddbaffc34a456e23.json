{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\node-bird\\\\react-nodebird\\\\front\\\\components\\\\PostForm.js\";\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { Form, Input, Button, Card, Avatar, Upload } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CameraOutlined, EnvironmentOutlined, PlusOutlined } from '@ant-design/icons';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const imageInput = useRef();\n  const {\n    0: previewVisible,\n    1: setpreviewVisible\n  } = useState(false);\n  const {\n    0: previewImage,\n    1: setPreviewImage\n  } = useState('');\n  const {\n    0: previewTitle,\n    1: setPreviewTitle\n  } = useState('');\n  0;\n\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    this.setState({\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\n    });\n  };\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\n\n\n  const onChangeImages = useCallback(e => {\n    //console.log('images', e.target.files); 유사배열, File객체\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click(); //click() - element를 마우스로 클릭한 것으로 한다.\n  }, [imageInput.current]);\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p); //req.body.image\n    });\n    formData.append('content', text); //req.body.content\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }); //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\n  //e.target - 특정 이벤트가 발생하는 태그\n  //e.target.name - 태그의 이름\n  //e.target.value - 태그에 입력된느 값\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n\n  const uploadButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        children: me.nickname[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this),\n      title: me.nickname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '10px 0 20px'\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n        bordered: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '10px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          multiple: true,\n          hidden: true,\n          ref: imageInput,\n          onChange: onChangeImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"text\",\n          onClick: onClickImageUpload,\n          children: /*#__PURE__*/_jsxDEV(CameraOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 60\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"text\",\n          onClick: onClickImageUpload,\n          children: /*#__PURE__*/_jsxDEV(EnvironmentOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 60\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          shape: \"round\",\n          style: {\n            float: 'right'\n          },\n          htmlType: \"submit\",\n          children: \"\\uC5C5\\uB85C\\uB4DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Upload, {\n          listType: \"picture-card\",\n          fileList: imagePaths,\n          onPreview: handlePreview,\n          onChange: handleChange,\n          children: imagePaths.length >= 8 ? null : uploadButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/components/PostForm.js"],"names":["React","useCallback","useState","useRef","useEffect","Form","Input","Button","Card","Avatar","Upload","useSelector","useDispatch","CameraOutlined","EnvironmentOutlined","PlusOutlined","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","imagePaths","addPostDone","state","post","me","user","imageInput","previewVisible","setpreviewVisible","previewImage","setPreviewImage","previewTitle","setPreviewTitle","handlePreview","file","url","preview","getBase64","originFileObj","setState","name","substring","lastIndexOf","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","data","onClickImageUpload","current","click","onSubmit","trim","alert","formData","p","onRemoveImage","index","onChangeText","value","uploadButton","marginTop","nickname","margin","float","handleChange","length"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from 'react';\r\nimport { Form, Input, Button, Card, Avatar, Upload } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { CameraOutlined, EnvironmentOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const { me } = useSelector((state) => state.user);\r\n     \r\n  const imageInput = useRef();\r\n  \r\n  const [ previewVisible, setpreviewVisible ] = useState(false);\r\n  const [ previewImage, setPreviewImage ] = useState('');\r\n  const [ previewTitle, setPreviewTitle ] = useState('');\r\n0\r\n  const handlePreview = async file => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n\r\n\r\n    this.setState({\r\n      previewImage: file.url || file.preview,\r\n      previewVisible: true,\r\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\r\n    });\r\n  };\r\n\r\n  /*이미지를 ajax로 업로드 할때 form 전송 필요\r\n  같은 key를 가진 값을 여러개 넣을수 있다.\r\n  값은 문자열로 자동변환*/\r\n\r\n  const onChangeImages = useCallback((e)=>{\r\n    //console.log('images', e.target.files); 유사배열, File객체\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f)=>{\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(()=>{\r\n    imageInput.current.click();\r\n    //click() - element를 마우스로 클릭한 것으로 한다.\r\n}, [imageInput.current]);\r\n  \r\n  useEffect(() => { \r\n    if(addPostDone) {\r\n      setText('');\r\n      \r\n    }\r\n  },[addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);//req.body.image\r\n    });\r\n    formData.append('content', text);//req.body.content\r\n\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]); \r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    })\r\n  });\r\n  //useCallback컴포넌트가 리렌더링 될때마다 함수들이 새로 생성되는 것을 방지\r\n  //e.target - 특정 이벤트가 발생하는 태그\r\n  //e.target.name - 태그의 이름\r\n  //e.target.value - 태그에 입력된느 값\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  \r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Meta\r\n      avatar={<Avatar>{me.nickname[0]}</Avatar>}\r\n      title={me.nickname}\r\n      />\r\n      <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n        <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" bordered={false}/>\r\n        <div style={{ margin: '10px 0'}}>\r\n          <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n          <Button type=\"text\" onClick={onClickImageUpload}><CameraOutlined /></Button>\r\n          <Button type=\"text\" onClick={onClickImageUpload}><EnvironmentOutlined /></Button>\r\n          <Button type=\"primary\" shape=\"round\" style={{ float: 'right' }} htmlType=\"submit\">업로드</Button>\r\n        </div>\r\n        <div>\r\n          <Upload\r\n          listType=\"picture-card\"\r\n          fileList={imagePaths}\r\n          onPreview={handlePreview}\r\n          onChange={handleChange}\r\n          >\r\n            {imagePaths.length >= 8 ? null : uploadButton}\r\n            </Upload>\r\n        </div>\r\n      </Form>\r\n      </Card>\r\n    );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}