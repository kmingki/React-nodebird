{"ast":null,"code":"//put() redux store에 dispatch하는 역할\nfunction addPostAPI(data) {\n  // data???\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  //action\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate(); //게시글의 id\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      //post reducer와 user reducer\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  //action은 뭘까\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/post.js"],"names":["addPostAPI","data","axios","post","addPost","action","delay","id","shortId","generate","put","type","ADD_POST_SUCCESS","content","ADD_POST_TO_ME","err","console","error","ADD_POST_FAILURE","response","addCommentAPI","postId","addComment","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","watchAddPost","takeLatest","ADD_POST_REQUEST","watchLoadPosts","throttle","LOAD_POSTS_REQUEST","loadPosts","watchRemovePost","REMOVE_POST_REQUEST","removePost","watchAddComment","ADD_COMMENT_REQUEST","postSaga","all","fork"],"mappings":"AAAA;AAEA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AAAE;AACxB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACH;;AAED,UAAWG,OAAX,CAAmBC,MAAnB,EAA0B;AAAE;AACxB,MAAI;AACA;AACA,UAAMC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,EAAE,GAAGC,OAAO,CAACC,QAAR,EAAX,CAHA,CAG8B;;AAC9B,UAAMC,GAAG,CAAC;AACNC,MAAAA,IAAI,EAAGC,gBADD;AAENX,MAAAA,IAAI,EAAE;AACFM,QAAAA,EADE;AAEFM,QAAAA,OAAO,EAAER,MAAM,CAACJ;AAFd;AAFA,KAAD,CAAT;AAOA,UAAMS,GAAG,CAAC;AAAE;AACRC,MAAAA,IAAI,EAAEG,cADA;AAENb,MAAAA,IAAI,EAAEM;AAFA,KAAD,CAAT;AAIH,GAfD,CAeE,OAAOQ,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAML,GAAG,CAAC;AACNC,MAAAA,IAAI,EAACO,gBADC;AAENjB,MAAAA,IAAI,EAACc,GAAG,CAACI,QAAJ,CAAalB;AAFZ,KAAD,CAAT;AAIH;AACJ;;AAED,SAASmB,aAAT,CAAuBnB,IAAvB,EAA4B;AACxB,SAAOC,KAAK,CAACC,IAAN,CAAY,aAAYF,IAAI,CAACoB,MAAO,UAApC,EAA+CpB,IAA/C,CAAP;AACH;;AAED,UAAWqB,UAAX,CAAsBjB,MAAtB,EAA8B;AAAE;AAC5B,MAAG;AACC;AACA,UAAMC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMI,GAAG,CAAC;AACNC,MAAAA,IAAI,EAAEY,mBADA;AAENtB,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOc,GAAP,EAAY;AACV,UAAML,GAAG,CAAC;AACNC,MAAAA,IAAI,EAAEa,mBADA;AAENvB,MAAAA,IAAI,EAAGc,GAAG,CAACI,QAAJ,CAAalB;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAWwB,YAAX,GAA0B;AACtB,QAAMC,UAAU,CAACC,gBAAD,EAAmBvB,OAAnB,CAAhB;AACH;;AAED,UAAWwB,cAAX,GAA4B;AACxB,QAAMC,QAAQ,CAAC,IAAD,EAAOC,kBAAP,EAA2BC,SAA3B,CAAd;AACH;;AAED,UAAWC,eAAX,GAA6B;AACzB,QAAMN,UAAU,CAACO,mBAAD,EAAsBC,UAAtB,CAAhB;AACH;;AAED,UAAWC,eAAX,GAA6B;AACzB,QAAMT,UAAU,CAACU,mBAAD,EAAsBd,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAWe,QAAX,GAAsB;AACjC,QAAMC,GAAG,CAAC,CACNC,IAAI,CAACd,YAAD,CADE,EAENc,IAAI,CAACX,cAAD,CAFE,EAGNW,IAAI,CAACP,eAAD,CAHE,EAINO,IAAI,CAACJ,eAAD,CAJE,CAAD,CAAT;AAMH","sourcesContent":["//put() redux store에 dispatch하는 역할\r\n\r\nfunction addPostAPI(data) { // data???\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction * addPost(action){ //action\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();//게시글의 id\r\n        yield put({ \r\n            type : ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({ //post reducer와 user reducer\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction * addComment(action) { //action은 뭘까\r\n    try{\r\n        //const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction * watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction * watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction * watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function * postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}