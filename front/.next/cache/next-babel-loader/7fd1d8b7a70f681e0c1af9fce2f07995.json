{"ast":null,"code":"import { all, delay, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n} /// delay() => Promise 가 한번 resolve 되고 나면, 미들웨어는 Saga 를 다시 작동시키면서, 다음 yield 까지 코드를 실행합니다.\n\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); //{ email, password }\n    //console.log(result.data);\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n} //put():특정 액션을 dispatch한다.\n\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data //err.response가 undefined라는데 \n\n    });\n  }\n}\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/user.js"],"names":["all","delay","fork","takeLatest","put","call","axios","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","loadMyInfoAPI","get","loadMyInfo","action","result","type","data","err","console","error","response","logInAPI","post","logIn","log","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, takeLatest, put, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    LOAD_MY_INFO_REQUEST,\r\n    LOAD_MY_INFO_SUCCESS,\r\n    LOAD_MY_INFO_FAILURE,\r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS,\r\n  } from '../reducers/user';\r\n\r\nfunction loadMyInfoAPI() {\r\n    return axios.get('/user');\r\n}\r\n\r\n\r\nfunction * loadMyInfo (action) {\r\n    try {\r\n        const result = yield call(loadMyInfoAPI);\r\n        yield put({\r\n            type: LOAD_MY_INFO_SUCCESS,\r\n            data: result.data\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:LOAD_MY_INFO_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/user/login', data);\r\n}\r\n\r\n/// delay() => Promise 가 한번 resolve 되고 나면, 미들웨어는 Saga 를 다시 작동시키면서, 다음 yield 까지 코드를 실행합니다.\r\nfunction * logIn (action) {\r\n    try{\r\n        const result = yield call(logInAPI, action.data);//{ email, password }\r\n        //console.log(result.data);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(err){\r\n        console.log(err);\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data, \r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/user/logout');\r\n}\r\n\r\nfunction * logOut() {\r\n    try {\r\n        yield call(logOutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/user', data);\r\n}\r\n\r\n//put():특정 액션을 dispatch한다.\r\nfunction* signUp(action) {\r\n    try {\r\n      const result = yield call(signUpAPI, action.data);\r\n      console.log(result);\r\n      yield put({\r\n        type: SIGN_UP_SUCCESS,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: err.response.data,//err.response가 undefined라는데 \r\n      });\r\n    }\r\n  }\r\n  \r\nfunction followAPI() {\r\n    return axios.post('/api/follow');\r\n}\r\n\r\nfunction * follow(action) {\r\n    try{\r\n        //const result = yield call(followAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n    return axios.post('/api/unfollow');\r\n}\r\n\r\nfunction * unfollow(action) {\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchLoadMyInfo() {\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\r\n}\r\n\r\nfunction * watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction * watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction * watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction * watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction * watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function * userSaga(){\r\n    yield all([\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}