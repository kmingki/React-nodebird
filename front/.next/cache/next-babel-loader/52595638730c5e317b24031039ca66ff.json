{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\node-bird\\\\react-nodebird\\\\front\\\\pages\\\\main.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport AppLayout from '../components/AppLayout.js';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport Router from 'next/router';\nimport SideBar from '../components/SideBar';\nimport HomeBar from '../components/HomeBar';\nimport Home from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Main = function Main() {\n  _s();\n\n  console.log(\"main render\");\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError; //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\n  //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\n\n\n  useEffect(function () {\n    if (retweetError) {\n      return alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id //마지막 post의 id\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  useEffect(function () {\n    if (!me) {\n      return Router.push('/');\n    }\n  }, [me]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: me && /*#__PURE__*/_jsxDEV(AppLayout, {\n      SideBar: /*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 37\n      }, _this),\n      HomeBar: /*#__PURE__*/_jsxDEV(HomeBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 58\n      }, _this),\n      children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, _this), mainPosts.map(function (post) {\n        return /*#__PURE__*/_jsxDEV(PostCard, {\n          post: post\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, _this)\n  }, void 0, false);\n};\n\n_s(Main, \"eO+QMWR+/tIpNUDFV1MauWXrqHY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Main;\nexport var __N_SSP = true;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/pages/main.js"],"names":["React","useEffect","useDispatch","useSelector","PostForm","PostCard","AppLayout","LOAD_POSTS_REQUEST","Router","SideBar","HomeBar","Home","Main","console","log","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","retweetError","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","data","length","id","addEventListener","removeEventListener","push","map"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch , useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport AppLayout from '../components/AppLayout.js';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport axios from 'axios';\r\nimport Router from 'next/router';\r\nimport SideBar from '../components/SideBar';\r\nimport HomeBar from '../components/HomeBar';\r\nimport Home from '.';\r\n\r\nconst Main = () => {\r\n    console.log(\"main render\");\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state)=>state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state)=>state.post);\r\n\r\n\r\n    //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n    //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\r\n    useEffect(()=>{\r\n        if (retweetError){\r\n            return alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n\r\n    useEffect(()=>{\r\n        function onScroll(){\r\n            //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n            if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if( hasMorePosts && !loadPostsLoading ){\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        data: mainPosts[mainPosts.length - 1]?.id //마지막 post의 id\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n    \r\n    useEffect(()=>{\r\n        if (!me) {\r\n            return Router.push('/');\r\n        }\r\n    }, [me]);\r\n    \r\n    return (\r\n        <>\r\n        { me && <AppLayout SideBar={<SideBar/>} HomeBar={<HomeBar/>}>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((post) => {\r\n        return (<PostCard key={post.id} post={post} />);\r\n      })}\r\n        </AppLayout> }\r\n          \r\n        </>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context)=>{\r\n    const cookie = context.req? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    \r\n    context.store.dispatch(END); //REQUEST가 SUCCESS가 될때까지 기다려준다.\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}