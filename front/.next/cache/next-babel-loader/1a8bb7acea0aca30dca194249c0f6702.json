{"ast":null,"code":"//put() redux store에 dispatch하는 역할\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction unlikePostAPI(data) {\n  return axios.patch(`post/${data}/unlike`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    console.log(result.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // data == text \n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  //action\n  try {\n    const result = yield call(addPostAPI, action.data); //action.data == text\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //post reducer와 user reducer\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removeAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/post.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","unlikePostAPI","data","patch","unlikePost","action","result","console","log","type","err","error","response","likePostAPI","likePost","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["//put() redux store에 dispatch하는 역할\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n  } from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.patch(`post/${data}/unlike`);\r\n}\r\n\r\nfunction * unlikePost(action) {\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        console.log(result.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction * likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: error.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nfunction loadPostsAPI() {\r\n    return axios.get('/posts');\r\n}\r\n\r\nfunction * loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) { // data == text \r\n    \r\n    return axios.post('/post', { content : data });\r\n}\r\n\r\nfunction * addPost(action){ //action\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); //action.data == text\r\n        \r\n        yield put({ \r\n            type : ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        \r\n        yield put({ //post reducer와 user reducer\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n        \r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error:err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction * removePost(action) {\r\n    try{\r\n        //const result = yield call(removeAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction * addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction * watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction * watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction * watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction * watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction * watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction * watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function * postSaga() {\r\n    yield all([\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}