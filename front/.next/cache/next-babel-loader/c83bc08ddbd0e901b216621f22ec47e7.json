{"ast":null,"code":"//put() redux store에 dispatch하는 역할\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    //const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // data == text \n  console.log(data);\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  //action\n  try {\n    const result = yield call(addPostAPI, action.data); //action.data == text\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //post reducer와 user reducer\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removeAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  //action은 뭘까\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/post.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","response","addPostAPI","console","log","post","content","addPost","result","id","error","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["//put() redux store에 dispatch하는 역할\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    generateDummyPost,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n  } from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction * loadPosts(action) {\r\n    try {\r\n        //const result = yield call(loadPostsAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) { // data == text \r\n    console.log(data);\r\n    return axios.post('/post', { content : data });\r\n}\r\n\r\nfunction * addPost(action){ //action\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); //action.data == text\r\n        \r\n        yield put({ \r\n            type : ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        \r\n        yield put({ //post reducer와 user reducer\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n        \r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction * removePost(action) {\r\n    try{\r\n        //const result = yield call(removeAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction * addComment(action) { //action은 뭘까\r\n    try{\r\n        //const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction * watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction * watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction * watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function * postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}