{"ast":null,"code":"//import shortId from 'shortid';\n//import faker from 'faker';\nimport produce from \"immer\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unLikePostLoading: false,\n  unLikePostDone: false,\n  unLikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; //action\n\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\nexport var ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\nexport var ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE'; //Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\n//produce state, 상태의 결과 함수\n//return produce()인 것\n//draft가 state로 바뀌는것\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          }); //push() : 배열의 맨뒤에 push\n\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          draft.likePostError = null;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostDone = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unLikePostLoading = true;\n        draft.unLikePostDone = false;\n        draft.unLikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unLikePostLoading = false;\n          draft.unLikePostDone = true;\n          draft.unLikePostError = null;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unLikePostLoading = false;\n        draft.unLikePostDone = false;\n        draft.unLikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        action.data.map(function (v) {\n          return draft.mainPosts.push(v);\n        }); //action.data.concat(draft.mainPosts); action.data = load한 배열, action.data + draft.mainPosts\n\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.imagePaths = [];\n        draft.mainPosts.unshift(action.data); //새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.postId;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          draft.addCommentError = null;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = false;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        draft.uploadImagesError = false;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetDone = false;\n        draft.retweetError = action.error;\n        break;\n\n      default:\n        break;\n      //return draft해도 되지않나...\n    }\n  });\n};\n\nexport default reducer;\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","singlePost","hasMorePosts","likePostLoading","likePostDone","likePostError","unLikePostLoading","unLikePostDone","unLikePostError","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POSTS_REQUEST","ADD_POSTS_SUCCESS","ADD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","reducer","state","action","draft","type","filter","v","i","data","post","find","id","PostId","Likers","push","UserId","error","map","length","unshift","postId","Comments"],"mappings":"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","sourcesContent":["//import shortId from 'shortid';\r\n//import faker from 'faker';\r\nimport produce from \"immer\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths:[],\r\n  singlePost: null,\r\n  hasMorePosts: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unLikePostLoading: false,\r\n  unLikePostDone: false,\r\n  unLikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone : false,\r\n  retweetError: null,\r\n};\r\n\r\n//action\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POSTS_REQUEST = 'ADD_POSTS_REQUEST';\r\nexport const ADD_POSTS_SUCCESS = 'ADD_POSTS_SUCCESS';\r\nexport const ADD_POSTS_FAILURE = 'ADD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n//Reducers : action을 통해 어떤 행동을 정의했다면, 그 결과 상태가 어떻게 바뀌는지 특정하게 되는 함수\r\n//produce state, 상태의 결과 함수\r\n//return produce()인 것\r\n//draft가 state로 바뀌는것\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId }); //push() : 배열의 맨뒤에 push\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      draft.likePostError = null;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = action.error;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unLikePostLoading = true;\r\n      draft.unLikePostDone = false;\r\n      draft.unLikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v)=> v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v)=> v.id !== action.data.UserId);\r\n      draft.unLikePostLoading = false;\r\n      draft.unLikePostDone = true;\r\n      draft.unLikePostError = null;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unLikePostLoading = false;\r\n      draft.unLikePostDone = false;\r\n      draft.unLikePostError = action.error;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.singlePost = action.data;\r\n      break;\r\n    case LOAD_POST_FAILURE: \r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = action.error;\r\n      break;\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      action.data.map((v) => draft.mainPosts.push(v));\r\n      //action.data.concat(draft.mainPosts); action.data = load한 배열, action.data + draft.mainPosts\r\n      draft.hasMorePosts = action.data.length === 10;\r\n      break;\r\n    case LOAD_POSTS_FAILURE: \r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone=false;\r\n      draft.addPostError=null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone=true;\r\n      draft.imagePaths = [];\r\n      draft.mainPosts.unshift(action.data);//새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이반환\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading=true;\r\n      draft.removePostDone=false;\r\n      draft.removePostError=null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading=false;\r\n      draft.removePostDone=true;\r\n      draft.mainPosts=draft.mainPosts.filter((v)=> v.id !== action.data.postId);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading=false;\r\n      draft.removePostDone=false;\r\n      draft.removePostError=action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone=false;\r\n      draft.addCommentError= null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v)=>v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentDone=true;\r\n      draft.addCommentError= null;\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading=false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = false;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS:\r\n      draft.imagePaths=action.data;\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      draft.uploadImagesError = false;\r\n      break;\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS:\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = action.error;\r\n      break;\r\n    default: \r\n      break; //return draft해도 되지않나...\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default reducer;\r\n/*\r\nhttps://react.vlpt.us/redux/01-keywords.html\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}