{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; //(이전상태, 액션) => 다음상태\n\nvar rootReducer = combineReducers({\n  //서버사이드렌더링을 위해 index 추가\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  //user와 post의 initialstate는 redux가 해결\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAGA;;AACA,IAAMC,WAAW,GAACH,eAAe,CAAC;AAC9B;AACAI,EAAAA,KAAK,EAAE,iBAAyB;AAAA,QAAxBC,KAAwB,uEAAhB,EAAgB;AAAA,QAAXC,MAAW;;AAC5B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKR,OAAL;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAEA;AACA,eAAOL,KAAP;AANR;AAQH,GAX6B;AAY9BJ,EAAAA,IAAI,EAAJA,IAZ8B;AAYzB;AACLC,EAAAA,IAAI,EAAJA;AAb8B,CAAD,CAAjC;AAiBA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\nimport { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport post from './post';\r\n\r\n\r\n//(이전상태, 액션) => 다음상태\r\nconst rootReducer=combineReducers({\r\n    //서버사이드렌더링을 위해 index 추가\r\n    index: (state = {} , action) => {\r\n        switch (action.type) {\r\n            case HYDRATE:\r\n                console.log('HYDRATE', action);\r\n                return { ...state, ...action.payload };\r\n            \r\n                default :\r\n                return state;\r\n                }\r\n    },\r\n    user,//user와 post의 initialstate는 redux가 해결\r\n    post,\r\n});\r\n    \r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}