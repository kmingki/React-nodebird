{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper'; // use createWrapper from next-redux-wrapper to provide the store to all pages.\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar _require = require('redux-persist'),\n    persistStore = _require.persistStore;\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.__persistor = persistStore(store);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n}); // configureStore: store를 만든다.\n// createWrapper : store를 만드는 함수를 정의해서 넘긴다.\n\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createSagaMiddleware","createWrapper","composeWithDevTools","reducer","rootSaga","require","persistStore","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","__persistor","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B,C,CAAoD;;AACpD,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;eAEyBC,OAAO,CAAC,eAAD,C;IAAxBC,Y,YAAAA,Y;;AAER,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGR,oBAAoB,EAA3C;AACA,MAAMS,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,QACbX,OAAO,CAACF,eAAe,MAAf,SAAmBY,WAAnB,CAAD,CADM,GAEbP,mBAAmB,CACnBL,eAAe,MAAf,SAAmBY,WAAnB,CADmB,CAFvB;AAKA,MAAME,KAAK,GAAGb,WAAW,CAACK,OAAD,EAAUO,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBT,QAAnB,CAAjB;AACAO,EAAAA,KAAK,CAACG,WAAN,GAAoBR,YAAY,CAACK,KAAD,CAAhC;AACA,SAAOA,KAAP;AACD,CAZD;;AAcA,IAAMI,OAAO,GAAGd,aAAa,CAACM,cAAD,EAAiB;AAAES,EAAAA,KAAK;AAAP,CAAjB,CAA7B,C,CACA;AACA;;AACA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createWrapper } from 'next-redux-wrapper'; // use createWrapper from next-redux-wrapper to provide the store to all pages.\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst { persistStore } = require('redux-persist');\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : composeWithDevTools(\r\n      applyMiddleware(...middlewares),\r\n    );\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  store.__persistor = persistStore(store);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\r\n// configureStore: store를 만든다.\r\n// createWrapper : store를 만드는 함수를 정의해서 넘긴다.\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}