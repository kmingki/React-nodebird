{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\node-bird\\\\react-nodebird\\\\front\\\\pages\\\\main.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport AppLayout from '../components/AppLayout.js';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post); //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\n  //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\n\n  useEffect(() => {\n    if (retweetError) {\n      return alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id //마지막 post의 id\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  useEffect(() => {\n    console.log(\"main\");\n\n    if (!me) {\n      console.log(\"done\");\n      return Router.push('/');\n    }\n  }, [me]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this), mainPosts.map(post => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END); //REQUEST가 SUCCESS가 될때까지 기다려준다.\n\n  await context.store.sagaTask.toPromise();\n});\nexport default Main;","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/pages/main.js"],"names":["React","useEffect","useDispatch","useSelector","END","PostForm","PostCard","AppLayout","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","axios","Router","Main","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","data","length","id","addEventListener","removeEventListener","console","log","push","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch , useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport AppLayout from '../components/AppLayout.js';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport axios from 'axios';\r\nimport Router from 'next/router';\r\n\r\nconst Main = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state)=>state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state)=>state.post);\r\n\r\n\r\n    //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n    //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\r\n    useEffect(()=>{\r\n        if (retweetError){\r\n            return alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n\r\n    useEffect(()=>{\r\n        function onScroll(){\r\n            //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n            if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if( hasMorePosts && !loadPostsLoading ){\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        data: mainPosts[mainPosts.length - 1]?.id //마지막 post의 id\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    useEffect(()=>{\r\n        console.log(\"main\");\r\n        if (!me) {\r\n            console.log(\"done\");\r\n            return Router.push('/');\r\n        }\r\n    }, [me]);\r\n    \r\n    return (\r\n        <AppLayout>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((post) => {\r\n        return (<PostCard key={post.id} post={post} />);\r\n      })}\r\n        </AppLayout>   \r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context)=>{\r\n    const cookie = context.req? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    \r\n    context.store.dispatch(END); //REQUEST가 SUCCESS가 될때까지 기다려준다.\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}