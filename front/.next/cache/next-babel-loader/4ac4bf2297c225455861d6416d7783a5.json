{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\chatter\\\\chatter\\\\front\\\\pages\\\\main.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport MobileLayout from '../components/layout/MobileLayout.js';\nimport DesktopLayout from '../components/layout/DesktopLayout.js';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport SideBar from '../components/SideBar';\nimport Title from '../components/layout/Title';\nimport Menu from '../components/layout/Menu';\nimport { useMediaQuery } from 'react-responsive';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const isMobile = useMediaQuery({\n    maxWidth: 500\n  });\n  const isDesktop = useMediaQuery({\n    minWidth: 1024\n  }); //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\n  //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\n\n  useEffect(() => {\n    if (retweetError) {\n      return alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id //마지막 post의 id\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  useEffect(() => {\n    if (!me) {\n      return Router.push('/');\n    }\n  }, [me]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isMobile && /*#__PURE__*/_jsxDEV(MobileLayout, {\n      Header: /*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 46\n      }, this),\n      Menu: /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 63\n      }, this),\n      children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), mainPosts.map(post => {\n        return /*#__PURE__*/_jsxDEV(PostCard, {\n          post: post\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }, this), isDesktop && /*#__PURE__*/_jsxDEV(DesktopLayout, {\n      Side: /*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 46\n      }, this),\n      children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }, this), mainPosts.map(post => {\n        return /*#__PURE__*/_jsxDEV(PostCard, {\n          post: post\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 33\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END); //REQUEST가 SUCCESS가 될때까지 기다려준다.\n\n  await context.store.sagaTask.toPromise();\n});\nexport default Main;\n/**\r\n{ me && <AppLayout SideBar={<SideBar/>}>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((post) => {\r\n        return (<PostCard key={post.id} post={post} />);\r\n      })}\r\n        </AppLayout> }\r\n        */","map":{"version":3,"sources":["C:/Users/User/Desktop/chatter/chatter/front/pages/main.js"],"names":["React","useEffect","useDispatch","useSelector","END","PostForm","PostCard","MobileLayout","DesktopLayout","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","axios","Router","SideBar","Title","Menu","useMediaQuery","Main","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","isMobile","maxWidth","isDesktop","minWidth","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","data","length","id","addEventListener","removeEventListener","push","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch , useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport MobileLayout from '../components/layout/MobileLayout.js';\r\nimport DesktopLayout from '../components/layout/DesktopLayout.js';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport axios from 'axios';\r\nimport Router from 'next/router';\r\nimport SideBar from '../components/SideBar';\r\n\r\nimport Title from '../components/layout/Title';\r\nimport Menu from '../components/layout/Menu';\r\n\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nconst Main = () => {\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state)=>state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state)=>state.post);\r\n    const isMobile = useMediaQuery({ maxWidth: 500 });\r\n    const isDesktop = useMediaQuery({ minWidth: 1024 })\r\n\r\n    //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n    //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\r\n    useEffect(()=>{\r\n        if (retweetError){\r\n            return alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n\r\n    useEffect(()=>{\r\n        function onScroll(){\r\n            //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n            if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if( hasMorePosts && !loadPostsLoading ){\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        data: mainPosts[mainPosts.length - 1]?.id //마지막 post의 id\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n    \r\n    useEffect(()=>{\r\n        if (!me) {\r\n            return Router.push('/');\r\n        }\r\n    }, [me]);\r\n    \r\n    return (\r\n        <>\r\n        { isMobile && (<MobileLayout Header={<Title />} Menu={<Menu />}>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((post) => {\r\n                return (<PostCard key={post.id} post={post} />);\r\n            })}\r\n            </MobileLayout>)\r\n            }\r\n\r\n        { isDesktop && (<DesktopLayout Side={<SideBar />}>\r\n                    { me && <PostForm />}\r\n                    {mainPosts.map((post) => {\r\n                        return (<PostCard key={post.id} post={post} />);\r\n                    })}\r\n                    </DesktopLayout>)\r\n        }\r\n\r\n        \r\n          \r\n        </>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context)=>{\r\n    const cookie = context.req? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    \r\n    context.store.dispatch(END); //REQUEST가 SUCCESS가 될때까지 기다려준다.\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Main;\r\n\r\n\r\n/**\r\n{ me && <AppLayout SideBar={<SideBar/>}>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((post) => {\r\n        return (<PostCard key={post.id} post={post} />);\r\n      })}\r\n        </AppLayout> }\r\n        */"]},"metadata":{},"sourceType":"module"}