{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\node-bird\\\\react-nodebird\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport AppLayout from '../components/AppLayout.js';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading; //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\n  //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\n\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n  }, [LOAD_POSTS_REQUEST, LOAD_MY_INFO_REQUEST]);\n  useEffect(function () {\n    function onScroll() {\n      //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: mainPosts[mainPosts.length - 1].id //마지막 post의 id????\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }, _this), mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Home, \"oqG10cifXvQtI8RQRta7gdIVAso=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","PostForm","PostCard","AppLayout","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","data","length","id","addEventListener","removeEventListener","map","c"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,oBAAT,QAAqC,kBAArC;;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAEf,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AAFe,qBAGAC,WAAW,CAAC,UAACQ,KAAD;AAAA,WAASA,KAAK,CAACC,IAAf;AAAA,GAAD,CAHX;AAAA,MAGPC,EAHO,gBAGPA,EAHO;;AAAA,sBAIuCV,WAAW,CAAC,UAACQ,KAAD;AAAA,WAASA,KAAK,CAACG,IAAf;AAAA,GAAD,CAJlD;AAAA,MAIPC,SAJO,iBAIPA,SAJO;AAAA,MAIIC,YAJJ,iBAIIA,YAJJ;AAAA,MAIkBC,gBAJlB,iBAIkBA,gBAJlB,EAMf;AACA;;;AACAhB,EAAAA,SAAS,CAAC,YAAI;AACVS,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAGAG,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH,GAPQ,EAON,CAACD,kBAAD,EAAqBC,oBAArB,CAPM,CAAT;AASAP,EAAAA,SAAS,CAAC,YAAI;AACV,aAASkB,QAAT,GAAmB;AACf;AACA,UAAGC,MAAM,CAACC,OAAP,GAAeC,QAAQ,CAACC,eAAT,CAAyBC,YAAxC,GAAuDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAAlG,EAAuG;AACnG,YAAIT,YAAY,IAAI,CAACC,gBAArB,EAAuC;AACnCP,UAAAA,QAAQ,CAAC;AACLQ,YAAAA,IAAI,EAAEX,kBADD;AAELmB,YAAAA,IAAI,EAAEX,SAAS,CAACA,SAAS,CAACY,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAFjC,CAEoC;;AAFpC,WAAD,CAAR;AAIH;AACJ;AACJ;;AACDR,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCV,QAAlC;AACA,WAAO,YAAM;AACTC,MAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCX,QAArC;AACH,KAFD;AAGH,GAhBQ,EAgBN,CAACJ,SAAD,EAAYC,YAAZ,EAA0BC,gBAA1B,CAhBM,CAAT;AAkBA,sBACI,QAAC,SAAD;AAAA,eACMJ,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,aADZ,EAEKE,SAAS,CAACgB,GAAV,CAAc,UAACC,CAAD,EAAO;AAC1B,0BAAQ,QAAC,QAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAeA,CAAC,CAACJ,EAAjB;AAAA;AAAA;AAAA;AAAA,eAAR;AACD,KAFM,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAQH,CA3CD;;GAAMnB,I;UAEeP,W,EACFC,W,EACuCA,W;;;KAJpDM,I;AA6CN,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch , useSelector } from 'react-redux';\r\n\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport AppLayout from '../components/AppLayout.js';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\n\r\nconst Home = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state)=>state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state)=>state.post);\r\n\r\n    //useEffect : 컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n    //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n        });\r\n        dispatch({\r\n            type: LOAD_MY_INFO_REQUEST,\r\n        })\r\n    }, [LOAD_POSTS_REQUEST, LOAD_MY_INFO_REQUEST]);\r\n\r\n    useEffect(()=>{\r\n        function onScroll(){\r\n            //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n            if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if( hasMorePosts && !loadPostsLoading ){\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        data: mainPosts[mainPosts.length - 1].id //마지막 post의 id????\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n        return (<PostCard key={c.id} post={c} />);\r\n      })}\r\n        </AppLayout>   \r\n    );\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}