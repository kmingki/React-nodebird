{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport AppLayout from '../components/AppLayout.js';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n  /*\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state)=>state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state)=>state.post);\r\n    //컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n  //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\r\n  useEffect(()=>{\r\n      dispatch({\r\n          type: LOAD_POSTS_REQUEST,\r\n      });\r\n  }, []);\r\n    useEffect(()=>{\r\n      function onScroll(){\r\n          //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n          if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n              if( hasMorePosts && !loadPostsLoading ){\r\n                  dispatch({\r\n                      type: LOAD_POSTS_REQUEST,\r\n                      data: mainPosts[mainPosts.length - 1].id //마지막 post의 id????\r\n                  });\r\n              }\r\n          }\r\n      }\r\n      window.addEventListener('scroll', onScroll);\r\n      return () => {\r\n          window.removeEventListener('scroll', onScroll);\r\n      };\r\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n    console.log(\"done\");\r\n  return (//AppLayout 사이에 있는것이 children으로 전달됨\r\n      <AppLayout>\r\n          { me && <PostForm />}\r\n          {mainPosts.map((c) => {\r\n      return (<PostCard key={c.id} post={c} />);\r\n    })}\r\n      </AppLayout>   \r\n  );\r\n  */\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","PostForm","PostCard","AppLayout","LOAD_POSTS_REQUEST","Home"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEf,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIC,CAjDD;;AAmDA,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch , useSelector } from 'react-redux';\r\n\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport AppLayout from '../components/AppLayout.js';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Home = () => {\r\n\r\n    return(\r\n        <div>\r\n            <h>hello</h>\r\n        </div>\r\n    );\r\n\r\n    /*\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state)=>state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state)=>state.post);\r\n\r\n    //컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n    //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n        });\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        function onScroll(){\r\n            //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n            if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if( hasMorePosts && !loadPostsLoading ){\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        data: mainPosts[mainPosts.length - 1].id //마지막 post의 id????\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    console.log(\"done\");\r\n    return (//AppLayout 사이에 있는것이 children으로 전달됨\r\n        <AppLayout>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n        return (<PostCard key={c.id} post={c} />);\r\n      })}\r\n        </AppLayout>   \r\n    );\r\n    */\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}