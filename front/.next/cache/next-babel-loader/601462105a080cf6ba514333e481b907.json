{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; //action, action에 따라 상태를 수정하는 reducer를 저장하는\n//단 하나의 객체\n\nvar configureStore = function configureStore(context) {\n  //console.log(context);\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createSagaMiddleware","createWrapper","composeWithDevTools","reducer","rootSaga","configureStore","context","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CACA;AACA;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAChC;AACA,MAAMC,cAAc,GAACP,oBAAoB,EAAzC;AACA,MAAMQ,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,QACbV,OAAO,CAACF,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CADM,GAEbN,mBAAmB,CACnBL,eAAe,MAAf,SAAmBW,WAAnB,CADmB,CAFvB;AAKA,MAAME,KAAK,GAAGZ,WAAW,CAACK,OAAD,EAAUM,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAkBJ,cAAc,CAACK,GAAf,CAAmBR,QAAnB,CAAlB;AACA,SAAOM,KAAP;AACD,CAZH;;AAcE,IAAMG,OAAO,GAAGZ,aAAa,CAACI,cAAD,EAAiB;AAAES,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n//action, action에 따라 상태를 수정하는 reducer를 저장하는\r\n//단 하나의 객체\r\n\r\nconst configureStore = (context) => {\r\n    //console.log(context);\r\n    const sagaMiddleware=createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(\r\n        applyMiddleware(...middlewares),\r\n      );\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask =  sagaMiddleware.run(rootSaga);\r\n    return store;\r\n  };\r\n  \r\n  const wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\r\n  \r\n  export default wrapper;"]},"metadata":{},"sourceType":"module"}