{"ast":null,"code":"//put() redux store에 dispatch하는 역할\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction unlikePostAPI() {}\n\nfunction* unlikePost() {}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log(\"done \" + result.data.PostId);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // data == text \n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  //action\n  try {\n    const result = yield call(addPostAPI, action.data); //action.data == text\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //post reducer와 user reducer\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removeAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/post.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","unlikePostAPI","unlikePost","likePostAPI","data","patch","likePost","action","result","console","log","PostId","type","error","response","loadPostsAPI","get","loadPosts","err","addPostAPI","post","content","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["//put() redux store에 dispatch하는 역할\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n  } from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction unlikePostAPI() {\r\n\r\n}\r\n\r\nfunction * unlikePost() {\r\n\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction * likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        console.log(\"done \" + result.data.PostId);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: error.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nfunction loadPostsAPI() {\r\n    return axios.get('/posts');\r\n}\r\n\r\nfunction * loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) { // data == text \r\n    \r\n    return axios.post('/post', { content : data });\r\n}\r\n\r\nfunction * addPost(action){ //action\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); //action.data == text\r\n        \r\n        yield put({ \r\n            type : ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        \r\n        yield put({ //post reducer와 user reducer\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n        \r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error:err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction * removePost(action) {\r\n    try{\r\n        //const result = yield call(removeAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction * addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction * watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction * watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction * watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction * watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction * watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction * watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function * postSaga() {\r\n    yield all([\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}