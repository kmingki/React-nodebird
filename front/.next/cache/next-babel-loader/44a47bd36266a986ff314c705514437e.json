{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport AppLayout from '../components/AppLayout.js';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post); //컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\n  //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: mainPosts[mainPosts.length - 1].id //마지막 post의 id????\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return (\n    /*#__PURE__*/\n    //AppLayout 사이에 있는것이 children으로 전달됨\n    _jsxDEV(AppLayout, {\n      children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), mainPosts.map(c => {\n        return /*#__PURE__*/_jsxDEV(PostCard, {\n          post: c\n        }, c.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  );\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","PostForm","PostCard","AppLayout","LOAD_POSTS_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","data","length","id","addEventListener","removeEventListener","map","c"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAASP,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAAgDZ,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACK,IAAhB,CAAjE,CAHe,CAKf;AACA;;AACAf,EAAAA,SAAS,CAAC,MAAI;AACVQ,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMAN,EAAAA,SAAS,CAAC,MAAI;AACV,aAASiB,QAAT,GAAmB;AACf;AACA,UAAGC,MAAM,CAACC,OAAP,GAAeC,QAAQ,CAACC,eAAT,CAAyBC,YAAxC,GAAuDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAAlG,EAAuG;AACnG,YAAIV,YAAY,IAAI,CAACC,gBAArB,EAAuC;AACnCN,UAAAA,QAAQ,CAAC;AACLQ,YAAAA,IAAI,EAAEV,kBADD;AAELkB,YAAAA,IAAI,EAAEZ,SAAS,CAACA,SAAS,CAACa,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAFjC,CAEoC;;AAFpC,WAAD,CAAR;AAIH;AACJ;AACJ;;AACDR,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCV,QAAlC;AACA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCX,QAArC;AACH,KAFD;AAGH,GAhBQ,EAgBN,CAACL,SAAD,EAAYC,YAAZ,EAA0BC,gBAA1B,CAhBM,CAAT;AAkBA;AAAA;AAAQ;AACJ,YAAC,SAAD;AAAA,iBACML,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADZ,EAEKG,SAAS,CAACiB,GAAV,CAAeC,CAAD,IAAO;AAC1B,4BAAQ,QAAC,QAAD;AAAqB,UAAA,IAAI,EAAEA;AAA3B,WAAeA,CAAC,CAACJ,EAAjB;AAAA;AAAA;AAAA;AAAA,gBAAR;AACD,OAFM,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAQH,CAvCD;;AAyCA,eAAenB,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch ,useSelector } from 'react-redux';\r\n\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport AppLayout from '../components/AppLayout.js';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state)=>state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state)=>state.post);\r\n\r\n    //컴포넌트가 렌더링 될때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n    //component가 mount 됬을때, component가 unmount 됐을때, component가 update됬을때(특정 props, stat가 바뀔때)\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n        });\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        function onScroll(){\r\n            //scrollY:스크롤을 얼마나 내렸는지 clientHeight: 화면길이\r\n            if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if( hasMorePosts && !loadPostsLoading ){\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        data: mainPosts[mainPosts.length - 1].id //마지막 post의 id????\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (//AppLayout 사이에 있는것이 children으로 전달됨\r\n        <AppLayout>\r\n            { me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n        return (<PostCard key={c.id} post={c} />);\r\n      })}\r\n        </AppLayout>   \r\n    );\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}