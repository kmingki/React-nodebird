{"ast":null,"code":"//put() redux store에 dispatch하는 역할\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    dispatch({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.patch(`post/${data}/unlike`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data); //console.log(result.data);\n\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // data == text \n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  //action\n  try {\n    const result = yield call(addPostAPI, action.data); //action.data == text\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //post reducer와 user reducer\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data); //action.data == postid\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); //form data는 그대로 전송해야함\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data); //action.data = 이미지 form data\n\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/node-bird/react-nodebird/front/sagas/post.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","dispatch","type","err","console","error","response","unlikePostAPI","patch","unlikePost","likePostAPI","likePost","loadPostsAPI","get","loadPosts","addPostAPI","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","uploadImagesAPI","uploadImages","watchRetweet","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","watchUploadImages","postSaga"],"mappings":"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","sourcesContent":["//put() redux store에 dispatch하는 역할\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n  } from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data){\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction * retweet(action) {\r\n\r\n    try{\r\n        const result = yield call(retweetAPI, action.data);\r\n        dispatch({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        dispatch({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n    \r\n\r\n\r\n}\r\nfunction unlikePostAPI(data) {\r\n    return axios.patch(`post/${data}/unlike`);\r\n}\r\n\r\nfunction * unlikePost(action) {\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        //console.log(result.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction * likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: error.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nfunction loadPostsAPI() {\r\n    return axios.get('/posts');\r\n}\r\n\r\nfunction * loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) { // data == text \r\n    \r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction * addPost(action){ //action\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); //action.data == text\r\n        \r\n        yield put({ \r\n            type : ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        \r\n        yield put({ //post reducer와 user reducer\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n        \r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error:err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction * removePost(action) {\r\n    try{\r\n        const result = yield call(removePostAPI, action.data); //action.data == postid\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction * addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data){\r\n    return axios.post('/post/images', data); //form data는 그대로 전송해야함\r\n}\r\n\r\nfunction * uploadImages(action) {\r\n    try{\r\n        const result = yield call(uploadImagesAPI, action.data); //action.data = 이미지 form data\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction * watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction * watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction * watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction * watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction * watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction * watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction * watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nexport default function * postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}