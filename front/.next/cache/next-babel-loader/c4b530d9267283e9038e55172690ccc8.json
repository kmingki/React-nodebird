{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n//put() redux store에 dispatch하는 역할\nfunction addPostAPI(data) {\n  // data???\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate(); //게시글의 id\n\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            //post reducer와 user reducer\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/React/prepare/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga","addPostAPI","data","axios","post","action","delay","id","shortId","generate","put","type","ADD_POST_SUCCESS","content","ADD_POST_TO_ME","console","error","ADD_POST_FAILURE","response","addCommentAPI","postId","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","takeLatest","ADD_POST_REQUEST","throttle","LOAD_POSTS_REQUEST","loadPosts","REMOVE_POST_REQUEST","removePost","ADD_COMMENT_REQUEST","all","fork"],"mappings":"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","sourcesContent":["//put() redux store에 dispatch하는 역할\r\n\r\nfunction addPostAPI(data) { // data???\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction * addPost(action){ //action\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();//게시글의 id\r\n        yield put({ \r\n            type : ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({ //post reducer와 user reducer\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction * addComment(action) { //action은 뭘까\r\n    try{\r\n        //const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction * watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction * watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction * watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction * watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function * postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}